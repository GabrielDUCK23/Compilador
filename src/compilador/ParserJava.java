
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Sep 27 22:39:29 CDT 2023
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Sep 27 22:39:29 CDT 2023
  */
public class ParserJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserJava() {super();}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\061\000\002\002\004\000\002\004\003\000\002\004" +
    "\004\000\002\004\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\013\005\000" +
    "\002\014\003\000\002\014\005\000\002\016\007\000\002" +
    "\016\011\000\002\016\011\000\002\016\011\000\002\016" +
    "\011\000\002\016\007\000\002\016\007\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\003\007\000\002" +
    "\003\011\000\002\003\020\000\002\003\023\000\002\003" +
    "\023\000\002\003\023\000\002\003\021\000\002\003\024" +
    "\000\002\003\024\000\002\003\024\000\002\003\013\000" +
    "\002\003\011\000\002\002\010\000\002\002\011\000\002" +
    "\002\014\000\002\002\014\000\002\002\014\000\002\002" +
    "\021\000\002\002\024\000\002\002\024\000\002\002\024" +
    "\000\002\002\022\000\002\002\025\000\002\002\025\000" +
    "\002\002\025" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\024\053\010\073\013\102\022\120\016\124" +
    "\017\127\005\142\015\145\007\147\012\001\002\000\004" +
    "\142\177\001\002\000\004\142\173\001\002\000\004\002" +
    "\ufffe\001\002\000\016\013\uffee\020\uffee\025\uffee\045\uffee" +
    "\126\uffee\142\uffee\001\002\000\016\013\uffed\020\uffed\025" +
    "\uffed\045\uffed\126\uffed\142\uffed\001\002\000\026\002\000" +
    "\053\010\073\013\102\022\120\016\124\017\127\005\142" +
    "\015\145\007\147\012\001\002\000\016\013\uffef\020\uffef" +
    "\025\uffef\045\uffef\126\uffef\142\uffef\001\002\000\016\013" +
    "\uffea\020\uffea\025\uffea\045\uffea\126\uffea\142\uffea\001\002" +
    "\000\004\002\170\001\002\000\004\024\110\001\002\000" +
    "\004\142\025\001\002\000\016\013\uffeb\020\uffeb\025\uffeb" +
    "\045\uffeb\126\uffeb\142\uffeb\001\002\000\026\002\ufffb\053" +
    "\010\073\013\102\022\120\016\124\017\127\005\142\015" +
    "\145\007\147\012\001\002\000\026\002\ufffd\053\010\073" +
    "\013\102\022\120\016\124\017\127\005\142\015\145\007" +
    "\147\012\001\002\000\016\013\uffec\020\uffec\025\uffec\045" +
    "\uffec\126\uffec\142\uffec\001\002\000\004\002\ufffc\001\002" +
    "\000\004\002\ufffa\001\002\000\004\024\026\001\002\000" +
    "\006\025\027\142\030\001\002\000\004\013\072\001\002" +
    "\000\004\006\031\001\002\000\016\053\010\073\013\102" +
    "\022\124\017\145\007\147\012\001\002\000\004\126\033" +
    "\001\002\000\004\142\034\001\002\000\004\006\035\001" +
    "\002\000\016\053\010\073\013\102\022\124\017\145\007" +
    "\147\012\001\002\000\004\025\037\001\002\000\004\006" +
    "\040\001\002\000\016\053\010\073\013\102\022\124\017" +
    "\145\007\147\012\001\002\000\004\013\042\001\002\000" +
    "\022\014\044\053\010\063\045\073\013\102\022\124\017" +
    "\145\007\147\012\001\002\000\006\014\060\063\057\001" +
    "\002\000\026\002\uffd8\053\uffd8\073\uffd8\102\uffd8\120\uffd8" +
    "\124\uffd8\127\uffd8\142\uffd8\145\uffd8\147\uffd8\001\002\000" +
    "\010\070\046\114\047\142\050\001\002\000\004\020\055" +
    "\001\002\000\004\020\053\001\002\000\004\020\051\001" +
    "\002\000\004\014\052\001\002\000\026\002\uffd7\053\uffd7" +
    "\073\uffd7\102\uffd7\120\uffd7\124\uffd7\127\uffd7\142\uffd7\145" +
    "\uffd7\147\uffd7\001\002\000\004\014\054\001\002\000\026" +
    "\002\uffd5\053\uffd5\073\uffd5\102\uffd5\120\uffd5\124\uffd5\127" +
    "\uffd5\142\uffd5\145\uffd5\147\uffd5\001\002\000\004\014\056" +
    "\001\002\000\026\002\uffd6\053\uffd6\073\uffd6\102\uffd6\120" +
    "\uffd6\124\uffd6\127\uffd6\142\uffd6\145\uffd6\147\uffd6\001\002" +
    "\000\010\070\061\114\063\142\062\001\002\000\026\002" +
    "\uffd4\053\uffd4\073\uffd4\102\uffd4\120\uffd4\124\uffd4\127\uffd4" +
    "\142\uffd4\145\uffd4\147\uffd4\001\002\000\004\020\070\001" +
    "\002\000\004\020\066\001\002\000\004\020\064\001\002" +
    "\000\004\014\065\001\002\000\026\002\uffd1\053\uffd1\073" +
    "\uffd1\102\uffd1\120\uffd1\124\uffd1\127\uffd1\142\uffd1\145\uffd1" +
    "\147\uffd1\001\002\000\004\014\067\001\002\000\026\002" +
    "\uffd3\053\uffd3\073\uffd3\102\uffd3\120\uffd3\124\uffd3\127\uffd3" +
    "\142\uffd3\145\uffd3\147\uffd3\001\002\000\004\014\071\001" +
    "\002\000\026\002\uffd2\053\uffd2\073\uffd2\102\uffd2\120\uffd2" +
    "\124\uffd2\127\uffd2\142\uffd2\145\uffd2\147\uffd2\001\002\000" +
    "\020\014\074\053\010\073\013\102\022\124\017\145\007" +
    "\147\012\001\002\000\006\014\076\063\075\001\002\000" +
    "\026\002\uffdd\053\uffdd\073\uffdd\102\uffdd\120\uffdd\124\uffdd" +
    "\127\uffdd\142\uffdd\145\uffdd\147\uffdd\001\002\000\010\070" +
    "\077\114\100\142\101\001\002\000\026\002\uffdc\053\uffdc" +
    "\073\uffdc\102\uffdc\120\uffdc\124\uffdc\127\uffdc\142\uffdc\145" +
    "\uffdc\147\uffdc\001\002\000\004\020\106\001\002\000\004" +
    "\020\104\001\002\000\004\020\102\001\002\000\004\014" +
    "\103\001\002\000\026\002\uffdb\053\uffdb\073\uffdb\102\uffdb" +
    "\120\uffdb\124\uffdb\127\uffdb\142\uffdb\145\uffdb\147\uffdb\001" +
    "\002\000\004\014\105\001\002\000\026\002\uffd9\053\uffd9" +
    "\073\uffd9\102\uffd9\120\uffd9\124\uffd9\127\uffd9\142\uffd9\145" +
    "\uffd9\147\uffd9\001\002\000\004\014\107\001\002\000\026" +
    "\002\uffda\053\uffda\073\uffda\102\uffda\120\uffda\124\uffda\127" +
    "\uffda\142\uffda\145\uffda\147\uffda\001\002\000\006\025\111" +
    "\142\112\001\002\000\004\013\154\001\002\000\004\006" +
    "\113\001\002\000\016\053\010\073\013\102\022\124\017" +
    "\145\007\147\012\001\002\000\004\126\115\001\002\000" +
    "\004\142\116\001\002\000\004\006\117\001\002\000\016" +
    "\053\010\073\013\102\022\124\017\145\007\147\012\001" +
    "\002\000\004\025\121\001\002\000\004\006\122\001\002" +
    "\000\016\053\010\073\013\102\022\124\017\145\007\147" +
    "\012\001\002\000\004\013\124\001\002\000\022\014\126" +
    "\053\010\063\127\073\013\102\022\124\017\145\007\147" +
    "\012\001\002\000\006\014\142\063\141\001\002\000\026" +
    "\002\uffe7\053\uffe7\073\uffe7\102\uffe7\120\uffe7\124\uffe7\127" +
    "\uffe7\142\uffe7\145\uffe7\147\uffe7\001\002\000\010\070\130" +
    "\114\132\142\131\001\002\000\004\020\137\001\002\000" +
    "\004\020\135\001\002\000\004\020\133\001\002\000\004" +
    "\014\134\001\002\000\026\002\uffe4\053\uffe4\073\uffe4\102" +
    "\uffe4\120\uffe4\124\uffe4\127\uffe4\142\uffe4\145\uffe4\147\uffe4" +
    "\001\002\000\004\014\136\001\002\000\026\002\uffe6\053" +
    "\uffe6\073\uffe6\102\uffe6\120\uffe6\124\uffe6\127\uffe6\142\uffe6" +
    "\145\uffe6\147\uffe6\001\002\000\004\014\140\001\002\000" +
    "\026\002\uffe5\053\uffe5\073\uffe5\102\uffe5\120\uffe5\124\uffe5" +
    "\127\uffe5\142\uffe5\145\uffe5\147\uffe5\001\002\000\010\070" +
    "\143\114\144\142\145\001\002\000\026\002\uffe3\053\uffe3" +
    "\073\uffe3\102\uffe3\120\uffe3\124\uffe3\127\uffe3\142\uffe3\145" +
    "\uffe3\147\uffe3\001\002\000\004\020\152\001\002\000\004" +
    "\020\150\001\002\000\004\020\146\001\002\000\004\014" +
    "\147\001\002\000\026\002\uffe2\053\uffe2\073\uffe2\102\uffe2" +
    "\120\uffe2\124\uffe2\127\uffe2\142\uffe2\145\uffe2\147\uffe2\001" +
    "\002\000\004\014\151\001\002\000\026\002\uffe0\053\uffe0" +
    "\073\uffe0\102\uffe0\120\uffe0\124\uffe0\127\uffe0\142\uffe0\145" +
    "\uffe0\147\uffe0\001\002\000\004\014\153\001\002\000\026" +
    "\002\uffe1\053\uffe1\073\uffe1\102\uffe1\120\uffe1\124\uffe1\127" +
    "\uffe1\142\uffe1\145\uffe1\147\uffe1\001\002\000\022\014\156" +
    "\053\010\063\157\073\013\102\022\124\017\145\007\147" +
    "\012\001\002\000\006\020\163\063\162\001\002\000\026" +
    "\002\uffe9\053\uffe9\073\uffe9\102\uffe9\120\uffe9\124\uffe9\127" +
    "\uffe9\142\uffe9\145\uffe9\147\uffe9\001\002\000\004\142\160" +
    "\001\002\000\004\014\161\001\002\000\026\002\uffe8\053" +
    "\uffe8\073\uffe8\102\uffe8\120\uffe8\124\uffe8\127\uffe8\142\uffe8" +
    "\145\uffe8\147\uffe8\001\002\000\004\142\165\001\002\000" +
    "\004\014\164\001\002\000\026\002\uffde\053\uffde\073\uffde" +
    "\102\uffde\120\uffde\124\uffde\127\uffde\142\uffde\145\uffde\147" +
    "\uffde\001\002\000\004\020\166\001\002\000\004\014\167" +
    "\001\002\000\026\002\uffdf\053\uffdf\073\uffdf\102\uffdf\120" +
    "\uffdf\124\uffdf\127\uffdf\142\uffdf\145\uffdf\147\uffdf\001\002" +
    "\000\004\002\001\001\002\000\004\002\uffff\001\002\000" +
    "\004\020\176\001\002\000\006\016\174\020\ufff8\001\002" +
    "\000\004\142\173\001\002\000\004\020\ufff7\001\002\000" +
    "\004\002\ufff9\001\002\000\006\006\201\045\200\001\002" +
    "\000\006\007\216\143\215\001\002\000\016\053\010\073" +
    "\013\102\022\124\017\145\007\147\012\001\002\000\006" +
    "\020\204\045\203\001\002\000\012\007\210\070\206\114" +
    "\207\143\205\001\002\000\034\002\ufff6\014\ufff6\020\ufff6" +
    "\053\ufff6\063\ufff6\073\ufff6\102\ufff6\120\ufff6\124\ufff6\127" +
    "\ufff6\142\ufff6\145\ufff6\147\ufff6\001\002\000\004\020\214" +
    "\001\002\000\004\020\213\001\002\000\004\020\212\001" +
    "\002\000\004\020\211\001\002\000\034\002\ufff4\014\ufff4" +
    "\020\ufff4\053\ufff4\063\ufff4\073\ufff4\102\ufff4\120\ufff4\124" +
    "\ufff4\127\ufff4\142\ufff4\145\ufff4\147\ufff4\001\002\000\034" +
    "\002\ufff2\014\ufff2\020\ufff2\053\ufff2\063\ufff2\073\ufff2\102" +
    "\ufff2\120\ufff2\124\ufff2\127\ufff2\142\ufff2\145\ufff2\147\ufff2" +
    "\001\002\000\034\002\ufff3\014\ufff3\020\ufff3\053\ufff3\063" +
    "\ufff3\073\ufff3\102\ufff3\120\ufff3\124\ufff3\127\ufff3\142\ufff3" +
    "\145\ufff3\147\ufff3\001\002\000\034\002\ufff5\014\ufff5\020" +
    "\ufff5\053\ufff5\063\ufff5\073\ufff5\102\ufff5\120\ufff5\124\ufff5" +
    "\127\ufff5\142\ufff5\145\ufff5\147\ufff5\001\002\000\004\020" +
    "\220\001\002\000\004\020\217\001\002\000\034\002\ufff1" +
    "\014\ufff1\020\ufff1\053\ufff1\063\ufff1\073\ufff1\102\ufff1\120" +
    "\ufff1\124\ufff1\127\ufff1\142\ufff1\145\ufff1\147\ufff1\001\002" +
    "\000\034\002\ufff0\014\ufff0\020\ufff0\053\ufff0\063\ufff0\073" +
    "\ufff0\102\ufff0\120\ufff0\124\ufff0\127\ufff0\142\ufff0\145\ufff0" +
    "\147\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\016\002\017\003\020\004\013\007\003\013" +
    "\005\016\010\001\001\000\002\001\001\000\004\014\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\002\017\003\020\004\170\007\003\013\005" +
    "\016\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\002\017\003\020\004\023\007\003\013" +
    "\005\016\010\001\001\000\016\002\017\003\020\004\022" +
    "\007\003\013\005\016\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\040\001\001\000\002\001\001" +
    "\000\006\007\003\016\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\003" +
    "\016\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\122" +
    "\001\001\000\002\001\001\000\006\007\003\016\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\003\016\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserJava$actions {
  private final ParserJava parser;

  /** Constructor */
  CUP$ParserJava$actions(ParserJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJava$result;

      /* select the action based on the action number */
      switch (CUP$ParserJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion RETURN FALSE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-18)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion RETURN TRUE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-18)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion RETURN IDENTIFIER puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-18)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-15)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open RETURN FALSE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open RETURN TRUE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open RETURN IDENTIFIER puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-14)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open VariableDeclaracion RETURN FALSE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open VariableDeclaracion RETURN TRUE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open VariableDeclaracion RETURN IDENTIFIER puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-9)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open VariableDeclaracion llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Funciones ::= FUNCTION IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Funciones",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-5)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open VariableDeclaracion puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open VariableDeclaracion RETURN IDENTIFIER puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion RETURN FALSE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion RETURN TRUE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion RETURN IDENTIFIER puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-17)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open VariableDeclaracion llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-14)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open RETURN FALSE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-16)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open RETURN TRUE puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-16)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open RETURN IDENTIFIER puntoYcoma llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-16)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN IDENTIFIER Dospuntos Tipo coma IDENTIFIER Dospuntos Tipo PARENTHESIS_CLOSE Dospuntos Tipo llave_open llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-13)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open RETURN IDENTIFIER llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Metodos ::= IDENTIFIER PARENTHESIS_OPEN PARENTHESIS_CLOSE llave_open llave_close 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Metodos",1, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= VAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= LET 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= CONST 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= NUMBER 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Tipo",5, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VariableDeclaracion ::= Tipo IDENTIFIER EQ INTEGER_LITERAL puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VariableDeclaracion ::= Tipo IDENTIFIER EQ CADENA puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VariableDeclaracion ::= Tipo IDENTIFIER Dospuntos Tipo EQ FALSE puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VariableDeclaracion ::= Tipo IDENTIFIER Dospuntos Tipo EQ TRUE puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VariableDeclaracion ::= Tipo IDENTIFIER Dospuntos Tipo EQ CADENA puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VariableDeclaracion ::= Tipo IDENTIFIER Dospuntos Tipo EQ INTEGER_LITERAL puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VariableDeclaracion ::= Tipo IDENTIFIER Dospuntos Tipo puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",12, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // package_name ::= IDENTIFIER punto package_name 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("package_name",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // package_name ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("package_name",10, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // package_declaration ::= PACKAGE package_name puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("package_declaration",9, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Programa ::= Funciones Programa 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Programa ::= Funciones 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Programa ::= Metodos Programa 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Programa ::= Metodos 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= package_declaration 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= VariableDeclaracion Programa 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= VariableDeclaracion 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("Programa",2, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = start_val;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJava$parser.done_parsing();
          return CUP$ParserJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

