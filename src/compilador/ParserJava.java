
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Sep 21 20:08:49 CST 2023
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Sep 21 20:08:49 CST 2023
  */
public class ParserJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ParserJava() {super();}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\005\011\000\002\002\004\000\002\005" +
    "\013\000\002\005\007\000\002\005\007\000\002\005\006" +
    "\000\002\005\006\000\002\005\011\000\002\005\007\000" +
    "\002\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\012\071\005\100\004\122\006\140\007\001" +
    "\002\000\004\140\ufff8\001\002\000\004\140\ufff6\001\002" +
    "\000\004\140\ufff7\001\002\000\004\006\040\001\002\000" +
    "\004\140\013\001\002\000\004\002\012\001\002\000\004" +
    "\002\000\001\002\000\006\006\014\043\015\001\002\000" +
    "\006\005\025\145\024\001\002\000\006\004\016\143\017" +
    "\001\002\000\004\145\021\001\002\000\004\016\020\001" +
    "\002\000\004\002\ufff9\001\002\000\004\004\022\001\002" +
    "\000\004\016\023\001\002\000\004\002\ufffa\001\002\000" +
    "\006\016\033\043\032\001\002\000\006\016\027\043\026" +
    "\001\002\000\004\143\030\001\002\000\004\002\ufffe\001" +
    "\002\000\004\016\031\001\002\000\004\002\001\001\002" +
    "\000\004\004\034\001\002\000\004\002\ufffd\001\002\000" +
    "\004\145\035\001\002\000\004\004\036\001\002\000\004" +
    "\016\037\001\002\000\004\002\uffff\001\002\000\006\143" +
    "\042\145\041\001\002\000\004\016\044\001\002\000\004" +
    "\016\043\001\002\000\004\002\ufffb\001\002\000\004\002" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\006\002\007\005\010\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 s.init(); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


    // Conectar este analizador sintáctico a un analizador léxico (scanner).
    scanner s;
    Parser(scanner s){ this.s=s; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserJava$actions {
  private final ParserJava parser;

  /** Constructor */
  CUP$ParserJava$actions(ParserJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserJava$do_action(
    int                        CUP$ParserJava$act_num,
    java_cup.runtime.lr_parser CUP$ParserJava$parser,
    java.util.Stack            CUP$ParserJava$stack,
    int                        CUP$ParserJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJava$result;

      /* select the action based on the action number */
      switch (CUP$ParserJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PALABRACLAVE ::= VAR 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("PALABRACLAVE",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PALABRACLAVE ::= LET 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("PALABRACLAVE",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PALABRACLAVE ::= CONST 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("PALABRACLAVE",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VariableDeclaracion ::= PALABRACLAVE IDENTIFIER EQ NUMBER puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VariableDeclaracion ::= PALABRACLAVE IDENTIFIER EQ COMILLA_DOBLE STRING COMILLA_DOBLE puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VariableDeclaracion ::= IDENTIFIER Dospunto NUMBER puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VariableDeclaracion ::= IDENTIFIER Dospunto STRING puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-3)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VariableDeclaracion ::= PALABRACLAVE IDENTIFIER Dospunto STRING puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VariableDeclaracion ::= PALABRACLAVE IDENTIFIER Dospunto INT puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-4)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // VariableDeclaracion ::= PALABRACLAVE IDENTIFIER Dospunto STRING EQ COMILLA_DOBLE STRING COMILLA_DOBLE puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-8)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= VariableDeclaracion EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)).value;
		RESULT = start_val;
              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJava$parser.done_parsing();
          return CUP$ParserJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // VariableDeclaracion ::= PALABRACLAVE IDENTIFIER Dospunto INT EQ NUMBER puntoYcoma 
            {
              Object RESULT =null;

              CUP$ParserJava$result = parser.getSymbolFactory().newSymbol("VariableDeclaracion",3, ((java_cup.runtime.Symbol)CUP$ParserJava$stack.elementAt(CUP$ParserJava$top-6)), ((java_cup.runtime.Symbol)CUP$ParserJava$stack.peek()), RESULT);
            }
          return CUP$ParserJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

