/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package compilador;
import java_cup.runtime.*;

/**
* This class is a simple example lexer.
*/

class TypeScriptLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\45\1\46\1\1\16\7\4\0\1\3\1\54"+
    "\1\43\1\0\1\6\1\53\1\57\3\0\1\5\1\50\1\0\1\52"+
    "\1\0\1\4\1\10\11\11\2\0\1\55\1\51\1\56\2\0\16\6"+
    "\1\31\3\6\1\44\7\6\1\0\1\61\2\0\1\6\1\0\1\12"+
    "\1\13\1\17\1\37\1\22\1\26\1\40\1\34\1\25\1\6\1\24"+
    "\1\21\1\27\1\23\1\20\1\30\1\42\1\16\1\14\1\15\1\33"+
    "\1\36\1\32\1\41\1\35\1\6\1\0\1\60\2\0\6\7\1\47"+
    "\32\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0"+
    "\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0\2\6"+
    "\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6"+
    "\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0\46\6"+
    "\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0\1\7"+
    "\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6"+
    "\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0"+
    "\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7"+
    "\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6"+
    "\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6"+
    "\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6\1\0\13\6"+
    "\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7\1\6\7\7"+
    "\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6\1\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7"+
    "\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\1\7\13\0\3\7\1\0"+
    "\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0"+
    "\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\10\0\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\16\0\12\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\3\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\6\6\0"+
    "\2\6\2\7\2\0\12\7\22\0\2\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6"+
    "\2\7\2\0\12\7\1\0\2\6\17\0\2\7\1\0\10\6\1\0"+
    "\3\6\1\0\51\6\2\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\1\6\10\0\1\7\10\0\2\6\2\7\2\0\12\7\12\0\6\6"+
    "\2\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6\4\0"+
    "\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7\71\0"+
    "\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7\1\6"+
    "\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7\2\0"+
    "\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6\1\0"+
    "\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0"+
    "\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6\2\0"+
    "\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0"+
    "\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6\3\7"+
    "\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0\3\6"+
    "\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6\1\7"+
    "\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0\51\6"+
    "\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0\14\7"+
    "\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7\7\6"+
    "\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7\1\0"+
    "\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7\57\6"+
    "\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6\15\7"+
    "\2\6\12\7\54\6\16\7\14\0\44\6\24\7\10\0\12\7\3\0"+
    "\3\6\12\7\44\6\122\0\3\7\1\0\25\7\4\6\1\7\4\6"+
    "\3\7\2\6\11\0\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6"+
    "\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6"+
    "\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6"+
    "\5\0\3\6\1\0\7\6\16\0\5\7\30\0\1\45\1\45\5\7"+
    "\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6"+
    "\15\0\1\6\20\0\15\6\3\0\33\6\25\0\15\7\4\0\1\7"+
    "\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6"+
    "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6"+
    "\14\0\46\6\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6"+
    "\17\0\1\7\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6"+
    "\2\0\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6"+
    "\1\0\4\6\5\0\51\6\3\0\136\6\21\0\33\6\65\0\20\6"+
    "\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6"+
    "\3\0\20\6\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0"+
    "\31\6\7\0\1\7\120\6\2\7\45\0\11\6\2\0\147\6\2\0"+
    "\4\6\1\0\4\6\14\0\13\6\115\0\12\6\1\7\3\6\1\7"+
    "\4\6\1\7\27\6\5\7\20\0\1\6\7\0\64\6\14\0\2\7"+
    "\62\6\21\7\13\0\12\7\6\0\22\7\6\6\3\0\1\6\4\0"+
    "\12\7\34\6\10\7\2\0\27\6\15\7\14\0\35\6\3\0\4\7"+
    "\57\6\16\7\16\0\1\6\12\7\46\0\51\6\16\7\11\0\3\6"+
    "\1\7\10\6\2\7\2\0\12\7\6\0\27\6\3\0\1\6\1\7"+
    "\4\0\60\6\1\7\1\6\3\7\2\6\2\7\5\6\2\7\1\6"+
    "\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0\3\6\2\7"+
    "\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6"+
    "\221\0\43\6\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0"+
    "\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0\14\6\1\0"+
    "\32\6\1\0\23\6\1\0\2\6\1\0\17\6\2\0\16\6\42\0"+
    "\173\6\105\0\65\6\210\0\1\7\202\0\35\6\3\0\61\6\57\0"+
    "\37\6\21\0\33\6\65\0\36\6\2\0\44\6\4\0\10\6\1\0"+
    "\5\6\52\0\236\6\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0"+
    "\54\6\1\0\2\6\3\0\1\6\2\0\27\6\252\0\26\6\12\0"+
    "\32\6\106\0\70\6\6\0\2\6\100\0\1\6\3\7\1\0\2\7"+
    "\5\0\4\7\4\6\1\0\3\6\1\0\33\6\4\0\3\7\4\0"+
    "\1\7\40\0\35\6\203\0\66\6\12\0\26\6\12\0\23\6\215\0"+
    "\111\6\u03b7\0\3\7\65\6\17\7\37\0\12\7\20\0\3\7\55\6"+
    "\13\7\2\0\1\7\22\0\31\6\7\0\12\7\6\0\3\7\44\6"+
    "\16\7\1\0\12\7\100\0\3\7\60\6\16\7\4\6\13\0\12\7"+
    "\u04a6\0\53\6\15\7\10\0\12\7\u0936\0\u036f\6\221\0\143\6\u0b9d\0"+
    "\u042f\6\u33d1\0\u0239\6\u04c7\0\105\6\13\0\1\6\56\7\20\0\4\7"+
    "\15\6\u4060\0\2\6\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0"+
    "\4\7\224\0\3\7\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\14\6\1\0\1\6\1\0"+
    "\7\6\1\0\101\6\1\0\4\6\2\0\10\6\1\0\7\6\1\0"+
    "\34\6\1\0\4\6\1\0\5\6\1\0\1\6\3\0\7\6\1\0"+
    "\u0154\6\2\0\31\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0"+
    "\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0"+
    "\31\6\1\0\10\6\2\0\62\7\u1600\0\4\6\1\0\33\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\12\6\1\0\4\6\1\0"+
    "\1\6\1\0\1\6\6\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\3\6\1\0\2\6\1\0\1\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\2\6\1\0"+
    "\1\6\2\0\4\6\1\0\7\6\1\0\4\6\1\0\4\6\1\0"+
    "\1\6\1\0\12\6\1\0\21\6\5\0\3\6\1\0\5\6\1\0"+
    "\21\6\u1144\0\ua6d7\6\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\2\5\23\4\1\6"+
    "\1\4\1\7\1\10\1\0\1\11\1\12\1\13\1\14"+
    "\2\0\1\15\1\16\1\17\1\1\1\0\1\20\1\21"+
    "\1\4\1\22\17\4\1\23\6\4\1\24\1\25\17\4"+
    "\1\26\3\4\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\2\0\1\4\1\45\4\4\1\46\4\4\1\47\11\4"+
    "\1\50\4\4\1\51\7\4\1\52\12\4\1\53\5\4"+
    "\1\54\1\4\1\0\1\1\10\4\1\55\1\4\1\56"+
    "\1\57\2\4\1\60\4\4\1\61\1\62\2\4\1\63"+
    "\6\4\1\64\7\4\1\65\2\4\1\66\6\4\1\67"+
    "\4\4\1\70\1\4\1\71\3\4\1\72\1\73\1\4"+
    "\1\74\7\4\1\75\7\4\1\76\1\77\7\4\1\100"+
    "\1\101\1\102\1\103\1\104\1\105\4\4\1\106\1\107"+
    "\2\4\1\110\3\4\1\111\3\4\1\112\2\4\1\113"+
    "\3\4\1\114\1\115\2\4\1\116\3\4\1\117\1\4"+
    "\1\120\1\4\1\121\1\4\1\122\1\123\1\0\1\4"+
    "\1\124\1\4\1\125\3\4\1\126\1\4\1\127\1\0"+
    "\3\4\1\130\1\4\1\131\1\0\2\4\1\132\1\133"+
    "\1\0\1\4\1\134\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\226"+
    "\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc"+
    "\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0514\0\226\0\u0546\0\u0578\0\u05aa"+
    "\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a"+
    "\0\226\0\u076c\0\u079e\0\u07d0\0\226\0\226\0\u0802\0\u012c"+
    "\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992"+
    "\0\u09c4\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u012c"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u012c"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\u0f0a\0\u0f3c\0\u012c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\226\0\226\0\226\0\226\0\226\0\226\0\226"+
    "\0\226\0\u1004\0\u1036\0\u1068\0\u012c\0\u109a\0\u10cc\0\u10fe"+
    "\0\u1130\0\u012c\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u012c\0\u122a"+
    "\0\u125c\0\u128e\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba"+
    "\0\u012c\0\u13ec\0\u141e\0\u1450\0\u1482\0\u012c\0\u14b4\0\u14e6"+
    "\0\u1518\0\u154a\0\u157c\0\u15ae\0\u15e0\0\u012c\0\u1612\0\u1644"+
    "\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e\0\u1770\0\u17a2\0\u17d4"+
    "\0\u012c\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u012c\0\u1900"+
    "\0\u1932\0\u1004\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e"+
    "\0\u1a90\0\u1ac2\0\u012c\0\u1af4\0\u012c\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u012c\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u012c\0\u012c\0\u1c84"+
    "\0\u1cb6\0\u012c\0\u1ce8\0\u1d1a\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2"+
    "\0\u012c\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\u1f40"+
    "\0\u012c\0\u1f72\0\u1fa4\0\u012c\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u012c\0\u2102\0\u2134\0\u2166\0\u2198\0\u012c"+
    "\0\u21ca\0\u012c\0\u21fc\0\u222e\0\u2260\0\u012c\0\u2292\0\u22c4"+
    "\0\u012c\0\u22f6\0\u2328\0\u235a\0\u238c\0\u23be\0\u23f0\0\u2422"+
    "\0\u012c\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c\0\u254e\0\u2580"+
    "\0\u012c\0\u012c\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac"+
    "\0\u26de\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u2710"+
    "\0\u2742\0\u2774\0\u27a6\0\u012c\0\u012c\0\u27d8\0\u280a\0\u012c"+
    "\0\u283c\0\u286e\0\u28a0\0\u012c\0\u28d2\0\u2904\0\u2936\0\u012c"+
    "\0\u2968\0\u299a\0\u012c\0\u29cc\0\u29fe\0\u2a30\0\u012c\0\u012c"+
    "\0\u2a62\0\u2a94\0\u012c\0\u2ac6\0\u2af8\0\u2b2a\0\u012c\0\u2b5c"+
    "\0\u012c\0\u2b8e\0\u012c\0\u2bc0\0\u012c\0\u012c\0\u2bf2\0\u2c24"+
    "\0\u012c\0\u2c56\0\u012c\0\u2c88\0\u2cba\0\u2cec\0\u012c\0\u2d1e"+
    "\0\u012c\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u012c\0\u2e18\0\u012c"+
    "\0\u2e4a\0\u2e7c\0\u2eae\0\u012c\0\u012c\0\u2ee0\0\u2f12\0\u012c"+
    "\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2"+
    "\0\u30d4\0\u3106\0\u3138\0\u316a\0\u319c\0\u31ce\0\u3200\0\u3232"+
    "\0\u3264\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\0\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\2\7\1\31\1\32\1\33\1\34\2\7"+
    "\1\35\1\36\1\0\1\4\1\0\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\0\1\50"+
    "\2\0\40\50\1\51\15\50\1\52\2\0\1\4\145\0"+
    "\1\53\1\54\43\0\1\55\61\0\1\56\16\0\35\7"+
    "\1\0\1\7\2\0\1\7\22\0\2\11\56\0\5\7"+
    "\1\57\1\60\6\7\1\61\17\7\1\0\1\7\2\0"+
    "\1\7\20\0\10\7\1\62\1\7\1\63\22\7\1\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\64\4\7\1\65"+
    "\7\7\1\66\1\67\1\7\1\70\5\7\1\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\71\15\7\1\72\1\73"+
    "\5\7\1\0\1\7\2\0\1\7\20\0\14\7\1\74"+
    "\20\7\1\0\1\7\2\0\1\7\20\0\4\7\1\75"+
    "\5\7\1\76\1\77\21\7\1\0\1\7\2\0\1\7"+
    "\20\0\20\7\1\100\14\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\101\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\13\7\1\102\1\7\1\103\15\7\1\104\1\7"+
    "\1\0\1\7\2\0\1\7\20\0\14\7\1\105\10\7"+
    "\1\106\7\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\107\2\7\1\110\1\111\13\7\1\0\1\7\2\0"+
    "\1\7\20\0\4\7\1\112\3\7\1\113\1\7\1\114"+
    "\4\7\1\115\5\7\1\116\7\7\1\0\1\7\2\0"+
    "\1\7\20\0\12\7\1\117\22\7\1\0\1\7\2\0"+
    "\1\7\20\0\4\7\1\120\3\7\1\121\14\7\1\122"+
    "\7\7\1\0\1\7\2\0\1\7\20\0\17\7\1\123"+
    "\6\7\1\124\6\7\1\0\1\7\2\0\1\7\20\0"+
    "\17\7\1\125\15\7\1\0\1\7\2\0\1\7\20\0"+
    "\4\7\1\126\5\7\1\127\22\7\1\0\1\7\2\0"+
    "\1\7\20\0\12\7\1\130\1\7\1\131\20\7\1\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\132\20\7\1\0"+
    "\1\7\2\0\1\7\20\0\27\7\1\133\5\7\1\0"+
    "\1\7\2\0\1\7\62\0\1\134\62\0\1\135\61\0"+
    "\1\136\1\137\60\0\1\140\61\0\1\141\61\0\1\142"+
    "\61\0\1\143\67\0\1\144\62\0\1\145\1\0\1\50"+
    "\2\0\40\50\1\0\15\50\16\0\1\146\1\147\4\0"+
    "\1\150\17\0\1\151\16\0\1\53\1\3\1\4\57\53"+
    "\5\152\1\153\54\152\6\0\6\7\1\154\26\7\1\0"+
    "\1\7\2\0\1\7\20\0\27\7\1\155\5\7\1\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\156\20\7\1\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\157\22\7\1\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\160\3\7\1\161"+
    "\24\7\1\0\1\7\2\0\1\7\20\0\7\7\1\162"+
    "\25\7\1\0\1\7\2\0\1\7\20\0\17\7\1\163"+
    "\15\7\1\0\1\7\2\0\1\7\20\0\22\7\1\164"+
    "\12\7\1\0\1\7\2\0\1\7\20\0\21\7\1\165"+
    "\13\7\1\0\1\7\2\0\1\7\20\0\25\7\1\166"+
    "\1\7\1\167\5\7\1\0\1\7\2\0\1\7\20\0"+
    "\10\7\1\170\6\7\1\171\15\7\1\0\1\7\2\0"+
    "\1\7\20\0\22\7\1\172\12\7\1\0\1\7\2\0"+
    "\1\7\20\0\7\7\1\173\24\7\1\174\1\0\1\7"+
    "\2\0\1\7\20\0\6\7\1\175\1\176\25\7\1\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\177\17\7\1\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\200\30\7\1\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\201\25\7\1\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\202\26\7\1\0"+
    "\1\7\2\0\1\7\20\0\25\7\1\203\7\7\1\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\204\12\7\1\205"+
    "\12\7\1\0\1\7\2\0\1\7\20\0\24\7\1\206"+
    "\10\7\1\0\1\7\2\0\1\7\20\0\13\7\1\207"+
    "\5\7\1\210\13\7\1\0\1\7\2\0\1\7\20\0"+
    "\6\7\1\211\1\212\25\7\1\0\1\7\2\0\1\7"+
    "\20\0\22\7\1\213\12\7\1\0\1\7\2\0\1\7"+
    "\20\0\13\7\1\214\21\7\1\0\1\7\2\0\1\7"+
    "\20\0\12\7\1\215\22\7\1\0\1\7\2\0\1\7"+
    "\20\0\10\7\1\216\24\7\1\0\1\7\2\0\1\7"+
    "\20\0\15\7\1\217\17\7\1\0\1\7\2\0\1\7"+
    "\20\0\15\7\1\220\17\7\1\0\1\7\2\0\1\7"+
    "\20\0\31\7\1\221\3\7\1\0\1\7\2\0\1\7"+
    "\20\0\11\7\1\222\23\7\1\0\1\7\2\0\1\7"+
    "\20\0\12\7\1\223\4\7\1\224\15\7\1\0\1\7"+
    "\2\0\1\7\20\0\5\7\1\225\27\7\1\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\226\25\7\1\0\1\7"+
    "\2\0\1\7\20\0\17\7\1\227\15\7\1\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\230\20\7\1\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\231\24\7\1\0\1\7"+
    "\2\0\1\7\20\0\17\7\1\232\15\7\1\0\1\7"+
    "\2\0\1\7\20\0\5\7\1\233\3\7\1\234\1\7"+
    "\1\235\4\7\1\236\14\7\1\0\1\7\2\0\1\7"+
    "\20\0\7\7\1\237\25\7\1\0\1\7\2\0\1\7"+
    "\20\0\6\7\1\240\26\7\1\0\1\7\2\0\1\7"+
    "\12\0\5\152\1\241\60\152\1\242\1\241\54\152\6\0"+
    "\7\7\1\243\25\7\1\0\1\7\2\0\1\7\20\0"+
    "\4\7\1\244\30\7\1\0\1\7\2\0\1\7\20\0"+
    "\13\7\1\245\21\7\1\0\1\7\2\0\1\7\20\0"+
    "\7\7\1\246\25\7\1\0\1\7\2\0\1\7\20\0"+
    "\17\7\1\247\15\7\1\0\1\7\2\0\1\7\20\0"+
    "\7\7\1\250\25\7\1\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\251\20\7\1\0\1\7\2\0\1\7\20\0"+
    "\5\7\1\252\27\7\1\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\253\20\7\1\0\1\7\2\0\1\7\20\0"+
    "\12\7\1\254\22\7\1\0\1\7\2\0\1\7\20\0"+
    "\6\7\1\255\26\7\1\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\256\20\7\1\0\1\7\2\0\1\7\20\0"+
    "\25\7\1\257\7\7\1\0\1\7\2\0\1\7\20\0"+
    "\25\7\1\260\7\7\1\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\261\20\7\1\0\1\7\2\0\1\7\20\0"+
    "\11\7\1\262\23\7\1\0\1\7\2\0\1\7\20\0"+
    "\6\7\1\263\1\264\25\7\1\0\1\7\2\0\1\7"+
    "\20\0\6\7\1\265\26\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\266\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\21\7\1\267\13\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\270\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\12\7\1\271\22\7\1\0\1\7\2\0\1\7"+
    "\20\0\13\7\1\272\21\7\1\0\1\7\2\0\1\7"+
    "\20\0\5\7\1\273\27\7\1\0\1\7\2\0\1\7"+
    "\20\0\7\7\1\274\25\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\275\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\12\7\1\276\1\277\21\7\1\0\1\7\2\0"+
    "\1\7\20\0\6\7\1\300\26\7\1\0\1\7\2\0"+
    "\1\7\20\0\21\7\1\301\13\7\1\0\1\7\2\0"+
    "\1\7\20\0\4\7\1\302\30\7\1\0\1\7\2\0"+
    "\1\7\20\0\11\7\1\303\23\7\1\0\1\7\2\0"+
    "\1\7\20\0\25\7\1\304\7\7\1\0\1\7\2\0"+
    "\1\7\20\0\16\7\1\305\16\7\1\0\1\7\2\0"+
    "\1\7\20\0\7\7\1\306\25\7\1\0\1\7\2\0"+
    "\1\7\20\0\30\7\1\307\4\7\1\0\1\7\2\0"+
    "\1\7\20\0\13\7\1\310\21\7\1\0\1\7\2\0"+
    "\1\7\20\0\26\7\1\311\6\7\1\0\1\7\2\0"+
    "\1\7\20\0\13\7\1\312\21\7\1\0\1\7\2\0"+
    "\1\7\20\0\13\7\1\313\21\7\1\0\1\7\2\0"+
    "\1\7\20\0\31\7\1\314\3\7\1\0\1\7\2\0"+
    "\1\7\20\0\25\7\1\315\7\7\1\0\1\7\2\0"+
    "\1\7\20\0\13\7\1\316\21\7\1\0\1\7\2\0"+
    "\1\7\20\0\14\7\1\317\20\7\1\0\1\7\2\0"+
    "\1\7\20\0\4\7\1\320\30\7\1\0\1\7\2\0"+
    "\1\7\20\0\7\7\1\321\25\7\1\0\1\7\2\0"+
    "\1\7\12\0\4\152\1\4\1\241\54\152\6\0\10\7"+
    "\1\322\24\7\1\0\1\7\2\0\1\7\20\0\16\7"+
    "\1\323\16\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\324\20\7\1\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\325\15\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\326\17\7\1\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\327\23\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\330\24\7\1\0\1\7\2\0\1\7\20\0\12\7"+
    "\1\331\22\7\1\0\1\7\2\0\1\7\20\0\24\7"+
    "\1\332\10\7\1\0\1\7\2\0\1\7\20\0\23\7"+
    "\1\333\11\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\334\24\7\1\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\335\15\7\1\0\1\7\2\0\1\7\20\0\26\7"+
    "\1\336\6\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\337\25\7\1\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\340\15\7\1\0\1\7\2\0\1\7\20\0\6\7"+
    "\1\341\26\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\342\17\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\343\24\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\344\20\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\345\30\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\346\24\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\347\24\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\350\20\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\351\20\7\1\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\352\21\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\353\25\7\1\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\354\21\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\355\30\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\356\20\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\357\30\7\1\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\360\15\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\361\20\7\1\0\1\7\2\0\1\7\20\0\31\7"+
    "\1\362\3\7\1\0\1\7\2\0\1\7\20\0\32\7"+
    "\1\363\2\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\364\30\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\365\25\7\1\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\366\7\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\367\20\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\370\30\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\371\30\7\1\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\372\23\7\1\0\1\7\2\0\1\7\20\0\32\7"+
    "\1\373\2\7\1\0\1\7\2\0\1\7\20\0\26\7"+
    "\1\374\6\7\1\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\375\21\7\1\0\1\7\2\0\1\7\20\0\20\7"+
    "\1\376\14\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\377\17\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\u0100\24\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\u0101\24\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\u0102\17\7\1\0\1\7\2\0\1\7\20\0\31\7"+
    "\1\u0103\3\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\u0104\25\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\u0105\24\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\u0106\17\7\1\0\1\7\2\0\1\7\20\0\20\7"+
    "\1\u0107\14\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\u0108\25\7\1\0\1\7\2\0\1\7\20\0\21\7"+
    "\1\u0109\13\7\1\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\u010a\21\7\1\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\u010b\15\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u010c\20\7\1\0\1\7\2\0\1\7\20\0\32\7"+
    "\1\u010d\2\7\1\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\u010e\23\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\u010f\25\7\1\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\u0110\23\7\1\0\1\7\2\0\1\7\20\0\32\7"+
    "\1\u0111\2\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\u0112\24\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u0113\20\7\1\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\u0114\21\7\1\0\1\7\2\0\1\7\20\0\21\7"+
    "\1\u0115\13\7\1\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\u0116\23\7\1\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\u0117\17\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u0118\20\7\1\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\u0119\7\7\1\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\u011a\7\7\1\0\1\7\2\0\1\7\20\0\6\7"+
    "\1\u011b\26\7\1\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\u011c\23\7\1\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\u011d\30\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u011e\20\7\1\0\1\7\2\0\1\7\20\0\27\7"+
    "\1\u011f\5\7\1\0\1\7\2\0\1\7\20\0\12\7"+
    "\1\u0120\22\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u0121\20\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\u0122\25\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u0123\20\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u0124\20\7\1\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\u0125\20\7\1\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\u0126\25\7\1\0\1\7\2\0\1\7\12\0\1\u0127"+
    "\2\0\3\u0127\35\u0128\1\u0127\1\u0128\2\0\1\7\12\u0127"+
    "\6\0\7\7\1\u0129\25\7\1\0\1\7\2\0\1\7"+
    "\20\0\11\7\1\u012a\23\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\u012b\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\u012c\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\11\7\1\u012d\23\7\1\0\1\7\2\0\1\7"+
    "\20\0\15\7\1\u012e\17\7\1\0\1\7\2\0\1\7"+
    "\20\0\15\7\1\u012f\17\7\1\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\u0130\20\7\1\0\1\7\2\0\1\7"+
    "\20\0\10\7\1\u0131\24\7\1\0\1\7\2\0\1\7"+
    "\32\0\1\u0132\47\0\12\7\1\u0133\22\7\1\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\u0134\25\7\1\0\1\7"+
    "\2\0\1\7\20\0\23\7\1\u0135\11\7\1\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\u0136\20\7\1\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\u0137\25\7\1\0\1\7"+
    "\2\0\1\7\20\0\31\7\1\u0138\3\7\1\0\1\7"+
    "\2\0\1\7\45\0\1\u0139\34\0\25\7\1\u013a\7\7"+
    "\1\0\1\7\2\0\1\7\20\0\12\7\1\u013b\22\7"+
    "\1\0\1\7\2\0\1\7\20\0\20\7\1\u013c\14\7"+
    "\1\0\1\7\2\0\1\7\20\0\6\7\1\u013d\26\7"+
    "\1\0\1\7\2\0\1\7\27\0\1\u013e\52\0\7\7"+
    "\1\u013f\25\7\1\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\u0140\24\7\1\0\1\7\2\0\1\7\12\0\1\u0141"+
    "\2\0\42\u0141\3\0\13\u0141\2\0\3\u0141\35\u0142\1\u0141"+
    "\1\u0142\2\0\1\7\12\u0141\30\0\1\u0143\37\0\22\7"+
    "\1\u0144\12\7\1\0\1\7\2\0\1\7\30\0\1\u0145"+
    "\51\0\10\7\1\u0146\24\7\1\0\1\7\2\0\1\7"+
    "\37\0\1\u0147\42\0\17\7\1\u0148\15\7\1\0\1\7"+
    "\2\0\1\7\35\0\1\u0149\44\0\15\7\1\u014a\17\7"+
    "\1\0\1\7\2\0\1\7\27\0\1\u014b\52\0\7\7"+
    "\1\u014c\25\7\1\0\1\7\2\0\1\7\33\0\1\u014d"+
    "\46\0\13\7\1\u014e\21\7\1\0\1\7\2\0\1\7"+
    "\35\0\1\u014f\44\0\15\7\1\u0150\17\7\1\0\1\7"+
    "\2\0\1\7\62\0\1\u0151\17\0\35\7\1\0\1\7"+
    "\2\0\1\7\1\u0151\62\0\1\u0152\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\3\1\1\11\24\1\1\11\3\1"+
    "\1\0\4\1\2\0\1\1\1\11\2\1\1\0\2\11"+
    "\55\1\16\11\2\0\65\1\1\0\205\1\1\0\12\1"+
    "\1\0\6\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[338];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        StringBuffer string = new StringBuffer();

        private Symbol symbol(int type) {
         return new Symbol(type, yyline, yycolumn);
        }
        private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2858) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore */
            }
          case 94: break;
          case 2: 
            { System.out.println("DIVISION"); return symbol(sym.DIVISION);
            }
          case 95: break;
          case 3: 
            { System.out.println("POR"); return symbol(sym.POR);
            }
          case 96: break;
          case 4: 
            { return symbol(sym.IDENTIFIER);
            }
          case 97: break;
          case 5: 
            { return symbol(sym.INTEGER_LITERAL);
            }
          case 98: break;
          case 6: 
            { string.setLength(0); yybegin(STRING);
            }
          case 99: break;
          case 7: 
            { System.out.println("PLUS"); return symbol(sym.PLUS);
            }
          case 100: break;
          case 8: 
            { System.out.println("EQ"); return symbol(sym.EQ);
            }
          case 101: break;
          case 9: 
            { System.out.println("PORCENTAJE"); return symbol(sym.PORCENTAJE);
            }
          case 102: break;
          case 10: 
            { System.out.println("NOT"); return symbol(sym.NOT);
            }
          case 103: break;
          case 11: 
            { System.out.println("MAYORQUE"); return symbol(sym.MAYORQUE);
            }
          case 104: break;
          case 12: 
            { System.out.println("MENORQUE"); return symbol(sym.MENORQUE);
            }
          case 105: break;
          case 13: 
            { string.append( yytext() );
            }
          case 106: break;
          case 14: 
            { yybegin(YYINITIAL); 
                                       return symbol(sym.STRING_LITERAL, 
                                       string.toString());
            }
          case 107: break;
          case 15: 
            { string.append('\\');
            }
          case 108: break;
          case 16: 
            { System.out.println("DIVISIONIGUAL"); return symbol(sym.DIVISIONIGUAL);
            }
          case 109: break;
          case 17: 
            { System.out.println("PORIGUAL"); return symbol(sym.PORIGUAL);
            }
          case 110: break;
          case 18: 
            { System.out.println("AS"); return symbol(sym.AS);
            }
          case 111: break;
          case 19: 
            { System.out.println("OF"); return symbol(sym.OF);
            }
          case 112: break;
          case 20: 
            { System.out.println("IN"); return symbol(sym.IN);
            }
          case 113: break;
          case 21: 
            { System.out.println("IF"); return symbol(sym.IF);
            }
          case 114: break;
          case 22: 
            { System.out.println("DO"); return symbol(sym.DO);
            }
          case 115: break;
          case 23: 
            { System.out.println("INCREMENTO"); return symbol(sym.INCREMENTO);
            }
          case 116: break;
          case 24: 
            { System.out.println("EQEQ"); return symbol(sym.EQEQ);
            }
          case 117: break;
          case 25: 
            { System.out.println("MENOSIGUAL"); return symbol(sym.MENOSIGUAL);
            }
          case 118: break;
          case 26: 
            { System.out.println("DECREMENTO"); return symbol(sym.DECREMENTO);
            }
          case 119: break;
          case 27: 
            { System.out.println("PorcentajeIGUAL"); return symbol(sym.PorcentajeIGUAL);
            }
          case 120: break;
          case 28: 
            { System.out.println("COMPARAIUAL"); return symbol(sym.COMPARAIUAL);
            }
          case 121: break;
          case 29: 
            { System.out.println("MENORIGUAL"); return symbol(sym.MENORIGUAL);
            }
          case 122: break;
          case 30: 
            { System.out.println("MAYORIGUAL"); return symbol(sym.MAYORIGUAL);
            }
          case 123: break;
          case 31: 
            { System.out.println("AND"); return symbol(sym.AND);
            }
          case 124: break;
          case 32: 
            { System.out.println("OR"); return symbol(sym.OR);
            }
          case 125: break;
          case 33: 
            { string.append('\t');
            }
          case 126: break;
          case 34: 
            { string.append('\r');
            }
          case 127: break;
          case 35: 
            { string.append('\n');
            }
          case 128: break;
          case 36: 
            { string.append('\"');
            }
          case 129: break;
          case 37: 
            { System.out.println("ANY"); return symbol(sym.ANY);
            }
          case 130: break;
          case 38: 
            { System.out.println("SET"); return symbol(sym.SET);
            }
          case 131: break;
          case 39: 
            { System.out.println("TRY"); return symbol(sym.TRY);
            }
          case 132: break;
          case 40: 
            { System.out.println("LET"); return symbol(sym.LET);
            }
          case 133: break;
          case 41: 
            { System.out.println("NEW"); return symbol(sym.NEW);
            }
          case 134: break;
          case 42: 
            { System.out.println("FOR"); return symbol(sym.FOR);
            }
          case 135: break;
          case 43: 
            { System.out.println("VAR"); return symbol(sym.VAR);
            }
          case 136: break;
          case 44: 
            { System.out.println("GET"); return symbol(sym.GET);
            }
          case 137: break;
          case 45: 
            { System.out.println("TRUE"); return symbol(sym.TRUE);
            }
          case 138: break;
          case 46: 
            { System.out.println("THIS"); return symbol(sym.THIS);
            }
          case 139: break;
          case 47: 
            { System.out.println("TYPE"); return symbol(sym.TYPE);
            }
          case 140: break;
          case 48: 
            { System.out.println("CASE"); return symbol(sym.CASE);
            }
          case 141: break;
          case 49: 
            { System.out.println("ELSE"); return symbol(sym.ELSE);
            }
          case 142: break;
          case 50: 
            { System.out.println("ENUM"); return symbol(sym.ENUM);
            }
          case 143: break;
          case 51: 
            { System.out.println("NULL"); return symbol(sym.NULL);
            }
          case 144: break;
          case 52: 
            { System.out.println("FROM"); return symbol(sym.FROM);
            }
          case 145: break;
          case 53: 
            { System.out.println("WITH"); return symbol(sym.WITH);
            }
          case 146: break;
          case 54: 
            { System.out.println("VOID"); return symbol(sym.VOID);
            }
          case 147: break;
          case 55: 
            { System.out.println("BREAK"); return symbol(sym.BREAK);
            }
          case 148: break;
          case 56: 
            { System.out.println("SUPER"); return symbol(sym.SUPER);
            }
          case 149: break;
          case 57: 
            { System.out.println("THROW"); return symbol(sym.THROW);
            }
          case 150: break;
          case 58: 
            { System.out.println("CATCH"); return symbol(sym.CATCH);
            }
          case 151: break;
          case 59: 
            { System.out.println("CONST"); return symbol(sym.CONST);
            }
          case 152: break;
          case 60: 
            { System.out.println("CLASS"); return symbol(sym.CLASS);
            }
          case 153: break;
          case 61: 
            { System.out.println("FALSE"); return symbol(sym.FALSE);
            }
          case 154: break;
          case 62: 
            { System.out.println("WHILE"); return symbol(sym.WHILE);
            }
          case 155: break;
          case 63: 
            { System.out.println("YIELD"); return symbol(sym.YIELD);
            }
          case 156: break;
          case 64: 
            { System.out.println("STATIC"); return symbol(sym.STATIC);
            }
          case 157: break;
          case 65: 
            { System.out.println("STRING"); return symbol(sym.STRING);
            }
          case 158: break;
          case 66: 
            { System.out.println("SWITCH"); return symbol(sym.SWITCH);
            }
          case 159: break;
          case 67: 
            { System.out.println("SYMBOL"); return symbol(sym.SYMBOL);
            }
          case 160: break;
          case 68: 
            { System.out.println("TYPEOF"); return symbol(sym.TYPEOF);
            }
          case 161: break;
          case 69: 
            { System.out.println("RETURN"); return symbol(sym.RETURN);
            }
          case 162: break;
          case 70: 
            { System.out.println("EXPORT"); return symbol(sym.EXPORT);
            }
          case 163: break;
          case 71: 
            { System.out.println("NUMBER"); return symbol(sym.NUMBER);
            }
          case 164: break;
          case 72: 
            { System.out.println("IMPORT"); return symbol(sym.IMPORT);
            }
          case 165: break;
          case 73: 
            { System.out.println("MODULE"); return symbol(sym.MODULE);
            }
          case 166: break;
          case 74: 
            { System.out.println("PUBLIC"); return symbol(sym.PUBLIC);
            }
          case 167: break;
          case 75: 
            { System.out.println("DELETE"); return symbol(sym.DELETE);
            }
          case 168: break;
          case 76: 
            { System.out.println("BOOLEAN"); return symbol(sym.BOOLEAN);
            }
          case 169: break;
          case 77: 
            { System.out.println("REQUIRE"); return symbol(sym.REQUIRE);
            }
          case 170: break;
          case 78: 
            { System.out.println("EXTENDS"); return symbol(sym.EXTENDS);
            }
          case 171: break;
          case 79: 
            { System.out.println("FINALLY"); return symbol(sym.FINALLY);
            }
          case 172: break;
          case 80: 
            { System.out.println("PACKAGE"); return symbol(sym.PACKAGE);
            }
          case 173: break;
          case 81: 
            { System.out.println("PRIVATE"); return symbol(sym.PRIVATE);
            }
          case 174: break;
          case 82: 
            { System.out.println("DECLARE"); return symbol(sym.DECLARE);
            }
          case 175: break;
          case 83: 
            { System.out.println("DEFAULT"); return symbol(sym.DEFAULT);
            }
          case 176: break;
          case 84: 
            { System.out.println("ABSTRACT"); return symbol(sym.ABSTRACT);
            }
          case 177: break;
          case 85: 
            { System.out.println("CONTINUE"); return symbol(sym.CONTINUE);
            }
          case 178: break;
          case 86: 
            { System.out.println("FUCTION"); return symbol(sym.FUNCTION);
            }
          case 179: break;
          case 87: 
            { System.out.println("DEBURGGER"); return symbol(sym.DEBUGGER);
            }
          case 180: break;
          case 88: 
            { System.out.println("INTERFACE"); return symbol(sym.INTERFACE);
            }
          case 181: break;
          case 89: 
            { System.out.println("PROTECTED"); return symbol(sym.PROTECTED);
            }
          case 182: break;
          case 90: 
            { System.out.println("INSTANCEOF"); return symbol(sym.INSTANCEOF);
            }
          case 183: break;
          case 91: 
            { System.out.println("IMPLEMENTS"); return symbol(sym.IMPLEMENTS);
            }
          case 184: break;
          case 92: 
            { System.out.println("CONSTRUCTOR"); return symbol(sym.CONSTRUCTOR);
            }
          case 185: break;
          case 93: 
            { System.out.println("MASIGUAL"); return symbol(sym.MASIGUAL);
            }
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
