/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package compilador;
import java_cup.runtime.*;

/**
* This class is a simple example lexer.
*/

class TypeScriptLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\60\1\61\1\1\16\7\4\0\1\3\1\67"+
    "\1\55\1\0\1\6\1\66\1\72\1\56\1\43\1\44\1\5\1\63"+
    "\1\54\1\65\1\46\1\4\1\10\11\11\1\47\1\45\1\70\1\64"+
    "\1\71\2\0\16\6\1\31\3\6\1\57\7\6\1\50\1\74\1\51"+
    "\1\0\1\6\1\0\1\12\1\13\1\17\1\37\1\22\1\26\1\40"+
    "\1\34\1\25\1\6\1\24\1\21\1\27\1\23\1\20\1\30\1\42"+
    "\1\16\1\14\1\15\1\33\1\36\1\32\1\41\1\35\1\6\1\52"+
    "\1\73\1\53\1\0\6\7\1\62\32\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\1\0\1\6\6\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\246\6\1\0\46\6\2\0\1\6\7\0"+
    "\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\6\7\5\0"+
    "\1\6\4\0\13\7\1\0\1\7\3\0\53\6\37\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7"+
    "\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7"+
    "\1\6\5\7\22\0\31\6\3\7\4\0\13\6\65\0\25\6\1\0"+
    "\10\6\26\0\60\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6"+
    "\2\7\2\0\12\7\1\0\20\6\3\7\1\0\10\6\2\0\2\6"+
    "\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7"+
    "\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\2\6\4\0"+
    "\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0"+
    "\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0"+
    "\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7"+
    "\2\0\12\7\1\0\1\6\7\0\1\6\6\7\1\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6"+
    "\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0"+
    "\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0"+
    "\14\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0"+
    "\1\7\16\0\12\7\11\0\1\6\6\0\4\7\1\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\20\6\3\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\1\0\3\6\5\0\2\6\2\7\2\0"+
    "\12\7\20\0\1\6\3\7\1\0\10\6\1\0\3\6\1\0\27\6"+
    "\1\0\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0"+
    "\12\7\1\0\2\6\15\0\4\7\1\0\10\6\1\0\3\6\1\0"+
    "\51\6\2\7\1\6\7\7\1\0\3\7\1\0\4\7\1\6\5\0"+
    "\3\6\1\7\7\0\3\6\2\7\2\0\12\7\12\0\6\6\2\0"+
    "\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\6\0"+
    "\12\7\2\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6"+
    "\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0"+
    "\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0"+
    "\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0"+
    "\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0\12\7\13\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\44\6"+
    "\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7\11\0\1\7"+
    "\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7\4\6\3\7"+
    "\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7\1\6\17\7"+
    "\2\0\46\6\1\0\1\6\5\0\1\6\2\0\53\6\1\0\u014d\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6"+
    "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6"+
    "\2\0\3\7\40\0\20\6\20\0\126\6\2\0\6\6\3\0\u026c\6"+
    "\2\0\21\6\1\0\32\6\5\0\113\6\3\0\13\6\7\0\15\6"+
    "\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0"+
    "\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6"+
    "\3\0\2\6\1\7\2\0\12\7\41\0\4\7\1\0\12\7\6\0"+
    "\130\6\10\0\5\6\2\7\42\6\1\7\1\6\5\0\106\6\12\0"+
    "\37\6\1\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\32\6\6\0\12\7\46\0\27\6\5\7\4\0"+
    "\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6"+
    "\10\0\16\7\102\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0"+
    "\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0"+
    "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\2\0\11\6"+
    "\107\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\3\7"+
    "\6\0\300\6\72\7\1\0\5\7\u0116\6\2\0\6\6\2\0\46\6"+
    "\2\0\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6"+
    "\1\0\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6"+
    "\1\0\7\6\16\0\5\7\30\0\1\60\1\60\5\7\20\0\2\6"+
    "\23\0\1\6\13\0\5\7\1\0\12\7\1\0\1\6\15\0\1\6"+
    "\20\0\15\6\3\0\40\6\20\0\15\7\4\0\1\7\3\0\14\7"+
    "\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6"+
    "\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6"+
    "\1\0\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6"+
    "\1\0\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7"+
    "\27\6\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0"+
    "\1\6\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6"+
    "\4\0\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6"+
    "\5\0\52\6\2\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6"+
    "\112\0\u51eb\6\25\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6"+
    "\12\7\2\6\24\0\57\6\1\7\4\0\12\7\1\0\37\6\2\7"+
    "\120\6\2\7\45\0\11\6\2\0\147\6\2\0\44\6\1\0\10\6"+
    "\77\0\13\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0"+
    "\1\6\7\0\64\6\14\0\2\7\62\6\22\7\12\0\12\7\6\0"+
    "\22\7\6\6\3\0\1\6\1\0\1\6\2\0\12\7\34\6\10\7"+
    "\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0"+
    "\1\6\12\7\6\0\5\6\1\7\12\6\12\7\5\6\1\0\51\6"+
    "\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6"+
    "\3\0\1\6\3\7\62\6\1\7\1\6\3\7\2\6\2\7\5\6"+
    "\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7\2\0"+
    "\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0\7\6"+
    "\1\0\7\6\1\0\53\6\1\0\12\6\12\0\163\6\10\7\1\0"+
    "\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0"+
    "\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7"+
    "\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0"+
    "\15\6\3\0\20\7\20\0\20\7\3\0\2\6\30\0\3\6\31\0"+
    "\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0"+
    "\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0"+
    "\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0"+
    "\2\6\22\0\3\7\4\0\14\6\1\0\32\6\1\0\23\6\1\0"+
    "\2\6\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6\210\0"+
    "\1\7\202\0\35\6\3\0\61\6\17\0\1\7\37\0\40\6\15\0"+
    "\36\6\5\0\46\6\5\7\5\0\36\6\2\0\44\6\4\0\10\6"+
    "\1\0\5\6\52\0\236\6\2\0\12\7\6\0\44\6\4\0\44\6"+
    "\4\0\50\6\10\0\64\6\234\0\u0137\6\11\0\26\6\12\0\10\6"+
    "\230\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6\3\0\1\6"+
    "\2\0\27\6\12\0\27\6\11\0\37\6\101\0\23\6\1\0\2\6"+
    "\12\0\26\6\12\0\32\6\106\0\70\6\6\0\2\6\100\0\1\6"+
    "\3\7\1\0\2\7\5\0\4\7\4\6\1\0\3\6\1\0\33\6"+
    "\4\0\3\7\4\0\1\7\40\0\35\6\3\0\35\6\43\0\10\6"+
    "\1\0\34\6\2\7\31\0\66\6\12\0\26\6\12\0\23\6\15\0"+
    "\22\6\156\0\111\6\67\0\63\6\15\0\63\6\u030d\0\3\7\65\6"+
    "\17\7\37\0\12\7\17\0\4\7\55\6\13\7\2\0\1\7\22\0"+
    "\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7\20\0"+
    "\43\6\1\7\2\0\1\6\11\0\3\7\60\6\16\7\4\6\5\0"+
    "\3\7\3\0\12\7\1\6\1\0\1\6\43\0\22\6\1\0\31\6"+
    "\14\7\6\0\1\7\101\0\7\6\1\0\1\6\1\0\4\6\1\0"+
    "\17\6\1\0\12\6\7\0\57\6\14\7\5\0\12\7\6\0\4\7"+
    "\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7"+
    "\2\0\1\6\6\0\1\7\5\0\5\6\2\7\2\0\7\7\3\0"+
    "\5\7\213\0\65\6\22\7\4\6\5\0\12\7\46\0\60\6\24\7"+
    "\2\6\1\0\1\6\10\0\12\7\246\0\57\6\7\7\2\0\11\7"+
    "\27\0\4\6\2\7\42\0\60\6\21\7\3\0\1\6\13\0\12\7"+
    "\46\0\53\6\15\7\10\0\12\7\66\0\32\6\3\0\17\7\4\0"+
    "\12\7\u0166\0\100\6\12\7\25\0\1\6\u0100\0\1\6\12\7\50\6"+
    "\7\7\1\6\4\7\10\0\1\7\10\0\1\6\13\7\50\6\2\0"+
    "\4\6\20\7\46\0\71\6\u0107\0\11\6\1\0\45\6\10\7\1\0"+
    "\10\7\1\6\17\0\12\7\30\0\36\6\2\0\26\7\1\0\16\7"+
    "\111\0\7\6\1\0\2\6\1\0\46\6\6\7\3\0\1\7\1\0"+
    "\2\7\1\0\7\7\1\6\1\7\10\0\12\7\u02a6\0\u039a\6\146\0"+
    "\157\6\21\0\304\6\u0abc\0\u042f\6\u0fd1\0\u0247\6\u21b9\0\u0239\6\7\0"+
    "\37\6\1\0\12\7\146\0\36\6\2\0\5\7\13\0\60\6\7\7"+
    "\11\0\4\6\14\0\12\7\11\0\25\6\5\0\23\6\u0370\0\105\6"+
    "\13\0\1\6\56\7\20\0\4\7\15\6\100\0\2\6\36\0\u17ed\6"+
    "\23\0\u02f3\6\u250d\0\u011f\6\121\0\u018c\6\u0904\0\153\6\5\0\15\6"+
    "\3\0\11\6\7\0\12\6\3\0\2\7\1\0\4\7\u14c1\0\5\7"+
    "\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\6"+
    "\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6\2\0\4\6"+
    "\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6\1\0\4\6"+
    "\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6\1\0\5\6"+
    "\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6\2\0\62\7"+
    "\u0200\0\67\7\4\0\62\7\10\0\1\7\16\0\1\7\26\0\5\7"+
    "\1\0\17\7\u0550\0\7\7\1\0\21\7\2\0\7\7\1\0\2\7"+
    "\1\0\5\7\u07d5\0\305\6\13\0\7\7\51\0\104\6\7\7\5\0"+
    "\12\7\u04a6\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6\2\0"+
    "\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6\6\0"+
    "\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6\1\0"+
    "\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6\1\0"+
    "\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6\1\0"+
    "\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6\51\0"+
    "\u1035\6\13\0\336\6\2\0\u1682\6\16\0\u1d31\6\u0c1f\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\2\5\23\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\1\4\1\37\17\4\1\40\6\4"+
    "\1\41\1\42\17\4\1\43\3\4\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\2\34\2\0\1\4\1\62\4\4"+
    "\1\63\4\4\1\64\11\4\1\65\4\4\1\66\7\4"+
    "\1\67\12\4\1\70\5\4\1\71\1\4\1\0\1\34"+
    "\10\4\1\72\1\4\1\73\1\74\2\4\1\75\4\4"+
    "\1\76\1\77\2\4\1\100\6\4\1\101\7\4\1\102"+
    "\2\4\1\103\6\4\1\104\4\4\1\105\1\4\1\106"+
    "\3\4\1\107\1\110\1\4\1\111\7\4\1\112\7\4"+
    "\1\113\1\114\7\4\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\4\4\1\123\1\124\2\4\1\125\3\4\1\126"+
    "\3\4\1\127\2\4\1\130\3\4\1\131\1\132\2\4"+
    "\1\133\3\4\1\134\1\4\1\135\1\4\1\136\1\4"+
    "\1\137\1\140\1\0\1\4\1\141\1\4\1\142\3\4"+
    "\1\143\1\4\1\144\1\0\3\4\1\145\1\4\1\146"+
    "\1\0\2\4\1\147\1\150\1\0\1\4\1\151\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\152";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\267"+
    "\0\u01ab\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd\0\u081a"+
    "\0\u0857\0\u0894\0\u08d1\0\267\0\u090e\0\u094b\0\u0988\0\267"+
    "\0\267\0\u09c5\0\u016e\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u016e\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89"+
    "\0\u0ec6\0\u0f03\0\u016e\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c"+
    "\0\u1259\0\u1296\0\u016e\0\u12d3\0\u1310\0\u134d\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\267\0\267\0\267\0\267"+
    "\0\267\0\267\0\267\0\267\0\u138a\0\267\0\u13c7\0\u1404"+
    "\0\u1441\0\u016e\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u016e\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u016e\0\u1666\0\u16a3\0\u16e0\0\u171d"+
    "\0\u175a\0\u1797\0\u17d4\0\u1811\0\u184e\0\u016e\0\u188b\0\u18c8"+
    "\0\u1905\0\u1942\0\u016e\0\u197f\0\u19bc\0\u19f9\0\u1a36\0\u1a73"+
    "\0\u1ab0\0\u1aed\0\u016e\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1\0\u1c1e"+
    "\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\u1d4f\0\u016e\0\u1d8c\0\u1dc9"+
    "\0\u1e06\0\u1e43\0\u1e80\0\u016e\0\u1ebd\0\u1efa\0\u13c7\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u016e"+
    "\0\u211f\0\u016e\0\u215c\0\u2199\0\u21d6\0\u016e\0\u2213\0\u2250"+
    "\0\u228d\0\u22ca\0\u016e\0\u016e\0\u2307\0\u2344\0\u016e\0\u2381"+
    "\0\u23be\0\u23fb\0\u2438\0\u2475\0\u24b2\0\u016e\0\u24ef\0\u252c"+
    "\0\u2569\0\u25a6\0\u25e3\0\u2620\0\u265d\0\u016e\0\u269a\0\u26d7"+
    "\0\u016e\0\u2714\0\u2751\0\u278e\0\u27cb\0\u2808\0\u2845\0\u016e"+
    "\0\u2882\0\u28bf\0\u28fc\0\u2939\0\u016e\0\u2976\0\u016e\0\u29b3"+
    "\0\u29f0\0\u2a2d\0\u016e\0\u2a6a\0\u2aa7\0\u016e\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u016e\0\u2c8f\0\u2ccc"+
    "\0\u2d09\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u016e\0\u016e\0\u2e3a"+
    "\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u016e\0\u016e"+
    "\0\u016e\0\u016e\0\u016e\0\u016e\0\u2fe5\0\u3022\0\u305f\0\u309c"+
    "\0\u016e\0\u016e\0\u30d9\0\u3116\0\u016e\0\u3153\0\u3190\0\u31cd"+
    "\0\u016e\0\u320a\0\u3247\0\u3284\0\u016e\0\u32c1\0\u32fe\0\u016e"+
    "\0\u333b\0\u3378\0\u33b5\0\u016e\0\u016e\0\u33f2\0\u342f\0\u016e"+
    "\0\u346c\0\u34a9\0\u34e6\0\u016e\0\u3523\0\u016e\0\u3560\0\u016e"+
    "\0\u359d\0\u016e\0\u016e\0\u35da\0\u3617\0\u016e\0\u3654\0\u016e"+
    "\0\u3691\0\u36ce\0\u370b\0\u016e\0\u3748\0\u016e\0\u3785\0\u37c2"+
    "\0\u37ff\0\u383c\0\u016e\0\u3879\0\u016e\0\u38b6\0\u38f3\0\u3930"+
    "\0\u016e\0\u016e\0\u396d\0\u39aa\0\u016e\0\u39e7\0\u3a24\0\u3a61"+
    "\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u3c0c\0\u3c49"+
    "\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\267";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\0\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\7\1\24\1\25\1\26\1\27"+
    "\1\7\1\30\2\7\1\31\1\32\1\33\1\34\2\7"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\0\1\4\1\0"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\0\1\63\2\0\52\63\1\64\16\63\1\65"+
    "\2\0\1\4\173\0\1\66\1\67\56\0\1\70\74\0"+
    "\1\71\16\0\35\7\14\0\1\7\2\0\1\7\22\0"+
    "\2\11\71\0\5\7\1\72\1\73\6\7\1\74\17\7"+
    "\14\0\1\7\2\0\1\7\20\0\10\7\1\75\1\7"+
    "\1\76\22\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\77\4\7\1\100\7\7\1\101\1\102\1\7\1\103"+
    "\5\7\14\0\1\7\2\0\1\7\20\0\10\7\1\104"+
    "\15\7\1\105\1\106\5\7\14\0\1\7\2\0\1\7"+
    "\20\0\14\7\1\107\20\7\14\0\1\7\2\0\1\7"+
    "\20\0\4\7\1\110\5\7\1\111\1\112\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\20\7\1\113\14\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\114\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\115\1\7\1\116"+
    "\15\7\1\117\1\7\14\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\120\10\7\1\121\7\7\14\0\1\7\2\0"+
    "\1\7\20\0\15\7\1\122\2\7\1\123\1\124\13\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\125\3\7"+
    "\1\126\1\7\1\127\4\7\1\130\5\7\1\131\7\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\132\22\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\133\3\7"+
    "\1\134\14\7\1\135\7\7\14\0\1\7\2\0\1\7"+
    "\20\0\17\7\1\136\6\7\1\137\6\7\14\0\1\7"+
    "\2\0\1\7\20\0\17\7\1\140\15\7\14\0\1\7"+
    "\2\0\1\7\20\0\4\7\1\141\5\7\1\142\22\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\143\1\7"+
    "\1\144\20\7\14\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\145\20\7\14\0\1\7\2\0\1\7\20\0\27\7"+
    "\1\146\5\7\14\0\1\7\2\0\1\7\75\0\1\147"+
    "\75\0\1\150\74\0\1\151\1\152\73\0\1\153\74\0"+
    "\1\154\74\0\1\155\74\0\1\156\102\0\1\157\75\0"+
    "\1\160\1\0\1\63\2\0\52\63\1\0\16\63\16\0"+
    "\1\161\1\162\4\0\1\163\31\0\1\164\17\0\1\66"+
    "\1\165\1\166\72\66\5\167\1\170\67\167\6\0\6\7"+
    "\1\171\26\7\14\0\1\7\2\0\1\7\20\0\27\7"+
    "\1\172\5\7\14\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\173\20\7\14\0\1\7\2\0\1\7\20\0\12\7"+
    "\1\174\22\7\14\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\175\3\7\1\176\24\7\14\0\1\7\2\0\1\7"+
    "\20\0\7\7\1\177\25\7\14\0\1\7\2\0\1\7"+
    "\20\0\17\7\1\200\15\7\14\0\1\7\2\0\1\7"+
    "\20\0\22\7\1\201\12\7\14\0\1\7\2\0\1\7"+
    "\20\0\21\7\1\202\13\7\14\0\1\7\2\0\1\7"+
    "\20\0\25\7\1\203\1\7\1\204\5\7\14\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\205\6\7\1\206\15\7"+
    "\14\0\1\7\2\0\1\7\20\0\22\7\1\207\12\7"+
    "\14\0\1\7\2\0\1\7\20\0\7\7\1\210\24\7"+
    "\1\211\14\0\1\7\2\0\1\7\20\0\6\7\1\212"+
    "\1\213\25\7\14\0\1\7\2\0\1\7\20\0\15\7"+
    "\1\214\17\7\14\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\215\30\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\216\25\7\14\0\1\7\2\0\1\7\20\0\6\7"+
    "\1\217\26\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\220\7\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\221\12\7\1\222\12\7\14\0\1\7\2\0\1\7"+
    "\20\0\24\7\1\223\10\7\14\0\1\7\2\0\1\7"+
    "\20\0\13\7\1\224\5\7\1\225\13\7\14\0\1\7"+
    "\2\0\1\7\20\0\6\7\1\226\1\227\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\22\7\1\230\12\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\231\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\232\22\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\233\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\234\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\235\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\31\7\1\236\3\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\237\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\240\4\7\1\241"+
    "\15\7\14\0\1\7\2\0\1\7\20\0\5\7\1\242"+
    "\27\7\14\0\1\7\2\0\1\7\20\0\7\7\1\243"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\17\7\1\244"+
    "\15\7\14\0\1\7\2\0\1\7\20\0\14\7\1\245"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\10\7\1\246"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\17\7\1\247"+
    "\15\7\14\0\1\7\2\0\1\7\20\0\5\7\1\250"+
    "\3\7\1\251\1\7\1\252\4\7\1\253\14\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\254\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\255\26\7\14\0"+
    "\1\7\2\0\1\7\14\0\1\166\72\0\5\167\1\256"+
    "\73\167\1\257\1\256\67\167\6\0\7\7\1\260\25\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\261\30\7"+
    "\14\0\1\7\2\0\1\7\20\0\13\7\1\262\21\7"+
    "\14\0\1\7\2\0\1\7\20\0\7\7\1\263\25\7"+
    "\14\0\1\7\2\0\1\7\20\0\17\7\1\264\15\7"+
    "\14\0\1\7\2\0\1\7\20\0\7\7\1\265\25\7"+
    "\14\0\1\7\2\0\1\7\20\0\14\7\1\266\20\7"+
    "\14\0\1\7\2\0\1\7\20\0\5\7\1\267\27\7"+
    "\14\0\1\7\2\0\1\7\20\0\14\7\1\270\20\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\271\22\7"+
    "\14\0\1\7\2\0\1\7\20\0\6\7\1\272\26\7"+
    "\14\0\1\7\2\0\1\7\20\0\14\7\1\273\20\7"+
    "\14\0\1\7\2\0\1\7\20\0\25\7\1\274\7\7"+
    "\14\0\1\7\2\0\1\7\20\0\25\7\1\275\7\7"+
    "\14\0\1\7\2\0\1\7\20\0\14\7\1\276\20\7"+
    "\14\0\1\7\2\0\1\7\20\0\11\7\1\277\23\7"+
    "\14\0\1\7\2\0\1\7\20\0\6\7\1\300\1\301"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\6\7\1\302"+
    "\26\7\14\0\1\7\2\0\1\7\20\0\14\7\1\303"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\21\7\1\304"+
    "\13\7\14\0\1\7\2\0\1\7\20\0\14\7\1\305"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\12\7\1\306"+
    "\22\7\14\0\1\7\2\0\1\7\20\0\13\7\1\307"+
    "\21\7\14\0\1\7\2\0\1\7\20\0\5\7\1\310"+
    "\27\7\14\0\1\7\2\0\1\7\20\0\7\7\1\311"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\14\7\1\312"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\12\7\1\313"+
    "\1\314\21\7\14\0\1\7\2\0\1\7\20\0\6\7"+
    "\1\315\26\7\14\0\1\7\2\0\1\7\20\0\21\7"+
    "\1\316\13\7\14\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\317\30\7\14\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\320\23\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\321\7\7\14\0\1\7\2\0\1\7\20\0\16\7"+
    "\1\322\16\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\323\25\7\14\0\1\7\2\0\1\7\20\0\30\7"+
    "\1\324\4\7\14\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\325\21\7\14\0\1\7\2\0\1\7\20\0\26\7"+
    "\1\326\6\7\14\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\327\21\7\14\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\330\21\7\14\0\1\7\2\0\1\7\20\0\31\7"+
    "\1\331\3\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\332\7\7\14\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\333\21\7\14\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\334\20\7\14\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\335\30\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\336\25\7\14\0\1\7\2\0\1\7\12\0\4\167"+
    "\1\166\1\256\67\167\6\0\10\7\1\337\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\16\7\1\340\16\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\341\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\17\7\1\342\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\343\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\344\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\345\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\346\22\7\14\0"+
    "\1\7\2\0\1\7\20\0\24\7\1\347\10\7\14\0"+
    "\1\7\2\0\1\7\20\0\23\7\1\350\11\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\351\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\17\7\1\352\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\26\7\1\353\6\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\354\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\17\7\1\355\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\356\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\357\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\360\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\361\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\362\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\363\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\364\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\365\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\366\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\367\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\370\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\371\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\372\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\373\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\374\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\17\7\1\375\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\376\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\31\7\1\377\3\7\14\0"+
    "\1\7\2\0\1\7\20\0\32\7\1\u0100\2\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\u0101\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\u0102\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\25\7\1\u0103\7\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0104\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\u0105\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\u0106\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\u0107\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\32\7\1\u0108\2\7\14\0"+
    "\1\7\2\0\1\7\20\0\26\7\1\u0109\6\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\u010a\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\20\7\1\u010b\14\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\u010c\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\u010d\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\u010e\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\u010f\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\31\7\1\u0110\3\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\u0111\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\u0112\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\u0113\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\20\7\1\u0114\14\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\u0115\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\21\7\1\u0116\13\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\u0117\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\17\7\1\u0118\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0119\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\32\7\1\u011a\2\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\u011b\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\u011c\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\u011d\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\32\7\1\u011e\2\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\u011f\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0120\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\13\7\1\u0121\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\21\7\1\u0122\13\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\u0123\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\u0124\17\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0125\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\25\7\1\u0126\7\7\14\0"+
    "\1\7\2\0\1\7\20\0\25\7\1\u0127\7\7\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\u0128\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\u0129\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\u012a\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u012b\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\27\7\1\u012c\5\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\u012d\22\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u012e\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\u012f\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0130\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0131\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\u0132\20\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\u0133\25\7\14\0"+
    "\1\7\2\0\1\7\12\0\1\u0134\2\0\3\u0134\35\u0135"+
    "\14\u0134\1\u0135\2\0\1\7\12\u0134\6\0\7\7\1\u0136"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u0137"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\14\7\1\u0138"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\14\7\1\u0139"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u013a"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\15\7\1\u013b"+
    "\17\7\14\0\1\7\2\0\1\7\20\0\15\7\1\u013c"+
    "\17\7\14\0\1\7\2\0\1\7\20\0\14\7\1\u013d"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\10\7\1\u013e"+
    "\24\7\14\0\1\7\2\0\1\7\32\0\1\u013f\62\0"+
    "\12\7\1\u0140\22\7\14\0\1\7\2\0\1\7\20\0"+
    "\7\7\1\u0141\25\7\14\0\1\7\2\0\1\7\20\0"+
    "\23\7\1\u0142\11\7\14\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\u0143\20\7\14\0\1\7\2\0\1\7\20\0"+
    "\7\7\1\u0144\25\7\14\0\1\7\2\0\1\7\20\0"+
    "\31\7\1\u0145\3\7\14\0\1\7\2\0\1\7\45\0"+
    "\1\u0146\47\0\25\7\1\u0147\7\7\14\0\1\7\2\0"+
    "\1\7\20\0\12\7\1\u0148\22\7\14\0\1\7\2\0"+
    "\1\7\20\0\20\7\1\u0149\14\7\14\0\1\7\2\0"+
    "\1\7\20\0\6\7\1\u014a\26\7\14\0\1\7\2\0"+
    "\1\7\27\0\1\u014b\65\0\7\7\1\u014c\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\u014d\24\7\14\0"+
    "\1\7\2\0\1\7\12\0\1\u014e\2\0\55\u014e\3\0"+
    "\13\u014e\2\0\3\u014e\35\u014f\14\u014e\1\u014f\2\0\1\7"+
    "\12\u014e\30\0\1\u0150\52\0\22\7\1\u0151\12\7\14\0"+
    "\1\7\2\0\1\7\30\0\1\u0152\64\0\10\7\1\u0153"+
    "\24\7\14\0\1\7\2\0\1\7\37\0\1\u0154\55\0"+
    "\17\7\1\u0155\15\7\14\0\1\7\2\0\1\7\35\0"+
    "\1\u0156\57\0\15\7\1\u0157\17\7\14\0\1\7\2\0"+
    "\1\7\27\0\1\u0158\65\0\7\7\1\u0159\25\7\14\0"+
    "\1\7\2\0\1\7\33\0\1\u015a\61\0\13\7\1\u015b"+
    "\21\7\14\0\1\7\2\0\1\7\35\0\1\u015c\57\0"+
    "\15\7\1\u015d\17\7\14\0\1\7\2\0\1\7\75\0"+
    "\1\u015e\17\0\35\7\14\0\1\7\2\0\1\7\1\u015e"+
    "\75\0\1\u015f\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\3\1\1\11\24\1\14\11\10\1"+
    "\2\0\1\1\1\11\2\1\1\0\2\11\55\1\16\11"+
    "\1\1\1\11\2\0\65\1\1\0\205\1\1\0\12\1"+
    "\1\0\6\1\1\0\4\1\1\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        StringBuffer string = new StringBuffer();

        private Symbol symbol(int type) {
         return new Symbol(type, yyline, yycolumn);
        }
        private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3458) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println(" "+yytext());
            }
          case 107: break;
          case 2: 
            { System.out.println("DIVISION "+yytext()); return symbol(sym.DIVISION);
            }
          case 108: break;
          case 3: 
            { System.out.println("POR "+yytext()); return symbol(sym.POR);
            }
          case 109: break;
          case 4: 
            { System.out.println("Identifier "+yytext()); return symbol(sym.IDENTIFIER);
            }
          case 110: break;
          case 5: 
            { System.out.println("DecIntegerLiteral "+yytext()); return symbol(sym.INTEGER_LITERAL);
            }
          case 111: break;
          case 6: 
            { System.out.println("PARENTHESIS_OPEN "+yytext()); return symbol(sym.PARENTHESIS_OPEN);
            }
          case 112: break;
          case 7: 
            { System.out.println("PARENTHESIS_CLOSE "+yytext()); return symbol(sym.PARENTHESIS_CLOSE);
            }
          case 113: break;
          case 8: 
            { System.out.println("puntoYcoma "+yytext()); return symbol(sym.puntoYcoma);
            }
          case 114: break;
          case 9: 
            { System.out.println("punto "+yytext()); return symbol(sym.punto);
            }
          case 115: break;
          case 10: 
            { System.out.println("Dospunto "+yytext()); return symbol(sym.punto);
            }
          case 116: break;
          case 11: 
            { System.out.println("corchete_open"+yytext()); return symbol(sym.corchete_open);
            }
          case 117: break;
          case 12: 
            { System.out.println("corchete_close "+yytext()); return symbol(sym.corchete_close);
            }
          case 118: break;
          case 13: 
            { System.out.println("llave_open"+yytext()); return symbol(sym.llave_open);
            }
          case 119: break;
          case 14: 
            { System.out.println("llave_close "+yytext()); return symbol(sym.llave_close);
            }
          case 120: break;
          case 15: 
            { System.out.println("coma "+yytext()); return symbol(sym.coma);
            }
          case 121: break;
          case 16: 
            { System.out.println("COMILLA_DOBLE "+yytext()); return symbol(sym.COMILLA_DOBLE);
            }
          case 122: break;
          case 17: 
            { System.out.println("COMILLA_SIMPLE "+yytext()); return symbol(sym.COMILLA_SIMPLE);
            }
          case 123: break;
          case 18: 
            { System.out.println("PLUS "+yytext()); return symbol(sym.PLUS);
            }
          case 124: break;
          case 19: 
            { System.out.println("EQ "+yytext()); return symbol(sym.EQ);
            }
          case 125: break;
          case 20: 
            { System.out.println("Menos "+yytext()); return symbol(sym.Menos);
            }
          case 126: break;
          case 21: 
            { System.out.println("PORCENTAJE "+yytext()); return symbol(sym.PORCENTAJE);
            }
          case 127: break;
          case 22: 
            { System.out.println("NOT "+yytext()); return symbol(sym.NOT);
            }
          case 128: break;
          case 23: 
            { System.out.println("MAYORQUE "+yytext()); return symbol(sym.MAYORQUE);
            }
          case 129: break;
          case 24: 
            { System.out.println("MENORQUE "+yytext()); return symbol(sym.MENORQUE);
            }
          case 130: break;
          case 25: 
            { string.append( yytext() );
            }
          case 131: break;
          case 26: 
            { yybegin(YYINITIAL); 
                                       return symbol(sym.STRING_LITERAL, 
                                       string.toString());
            }
          case 132: break;
          case 27: 
            { string.append('\\');
            }
          case 133: break;
          case 28: 
            { System.out.println("Comment"+yytext());
            }
          case 134: break;
          case 29: 
            { System.out.println("DIVISIONIGUAL "+yytext()); return symbol(sym.DIVISIONIGUAL);
            }
          case 135: break;
          case 30: 
            { System.out.println("PORIGUAL "+yytext()); return symbol(sym.PORIGUAL);
            }
          case 136: break;
          case 31: 
            { System.out.println("AS "+yytext()); return symbol(sym.AS);
            }
          case 137: break;
          case 32: 
            { System.out.println("OF "+yytext()); return symbol(sym.OF);
            }
          case 138: break;
          case 33: 
            { System.out.println("IN "+yytext()); return symbol(sym.IN);
            }
          case 139: break;
          case 34: 
            { System.out.println("IF "+yytext()); return symbol(sym.IF);
            }
          case 140: break;
          case 35: 
            { System.out.println("DO "+yytext()); return symbol(sym.DO);
            }
          case 141: break;
          case 36: 
            { System.out.println("INCREMENTO "+yytext()); return symbol(sym.INCREMENTO);
            }
          case 142: break;
          case 37: 
            { System.out.println("EQEQ "+yytext()); return symbol(sym.EQEQ);
            }
          case 143: break;
          case 38: 
            { System.out.println("MENOSIGUAL "+yytext()); return symbol(sym.MENOSIGUAL);
            }
          case 144: break;
          case 39: 
            { System.out.println("DECREMENTO "+yytext()); return symbol(sym.DECREMENTO);
            }
          case 145: break;
          case 40: 
            { System.out.println("PorcentajeIGUAL "+yytext()); return symbol(sym.PorcentajeIGUAL);
            }
          case 146: break;
          case 41: 
            { System.out.println("COMPARAIUAL "+yytext()); return symbol(sym.COMPARAIUAL);
            }
          case 147: break;
          case 42: 
            { System.out.println("MENORIGUAL "+yytext()); return symbol(sym.MENORIGUAL);
            }
          case 148: break;
          case 43: 
            { System.out.println("MAYORIGUAL "+yytext()); return symbol(sym.MAYORIGUAL);
            }
          case 149: break;
          case 44: 
            { System.out.println("AND "+yytext()); return symbol(sym.AND);
            }
          case 150: break;
          case 45: 
            { System.out.println("OR "+yytext()); return symbol(sym.OR);
            }
          case 151: break;
          case 46: 
            { string.append('\t');
            }
          case 152: break;
          case 47: 
            { string.append('\r');
            }
          case 153: break;
          case 48: 
            { string.append('\n');
            }
          case 154: break;
          case 49: 
            { string.append('\"');
            }
          case 155: break;
          case 50: 
            { System.out.println("ANY "+yytext()); return symbol(sym.ANY);
            }
          case 156: break;
          case 51: 
            { System.out.println("SET "+yytext()); return symbol(sym.SET);
            }
          case 157: break;
          case 52: 
            { System.out.println("TRY "+yytext()); return symbol(sym.TRY);
            }
          case 158: break;
          case 53: 
            { System.out.println("LET "+yytext()); return symbol(sym.LET);
            }
          case 159: break;
          case 54: 
            { System.out.println("NEW "+yytext()); return symbol(sym.NEW);
            }
          case 160: break;
          case 55: 
            { System.out.println("FOR "+yytext()); return symbol(sym.FOR);
            }
          case 161: break;
          case 56: 
            { System.out.println("VAR "+yytext()); return symbol(sym.VAR);
            }
          case 162: break;
          case 57: 
            { System.out.println("GET "+yytext()); return symbol(sym.GET);
            }
          case 163: break;
          case 58: 
            { System.out.println("TRUE "+yytext()); return symbol(sym.TRUE);
            }
          case 164: break;
          case 59: 
            { System.out.println("THIS "+yytext()); return symbol(sym.THIS);
            }
          case 165: break;
          case 60: 
            { System.out.println("TYPE "+yytext()); return symbol(sym.TYPE);
            }
          case 166: break;
          case 61: 
            { System.out.println("CASE "+yytext()); return symbol(sym.CASE);
            }
          case 167: break;
          case 62: 
            { System.out.println("ELSE "+yytext()); return symbol(sym.ELSE);
            }
          case 168: break;
          case 63: 
            { System.out.println("ENUM "+yytext()); return symbol(sym.ENUM);
            }
          case 169: break;
          case 64: 
            { System.out.println("NULL "+yytext()); return symbol(sym.NULL);
            }
          case 170: break;
          case 65: 
            { System.out.println("FROM "+yytext()); return symbol(sym.FROM);
            }
          case 171: break;
          case 66: 
            { System.out.println("WITH "+yytext()); return symbol(sym.WITH);
            }
          case 172: break;
          case 67: 
            { System.out.println("VOID "+yytext()); return symbol(sym.VOID);
            }
          case 173: break;
          case 68: 
            { System.out.println("BREAK "+yytext()); return symbol(sym.BREAK);
            }
          case 174: break;
          case 69: 
            { System.out.println("SUPER "+yytext()); return symbol(sym.SUPER);
            }
          case 175: break;
          case 70: 
            { System.out.println("THROW "+yytext()); return symbol(sym.THROW);
            }
          case 176: break;
          case 71: 
            { System.out.println("CATCH "+yytext()); return symbol(sym.CATCH);
            }
          case 177: break;
          case 72: 
            { System.out.println("CONST "+yytext()); return symbol(sym.CONST);
            }
          case 178: break;
          case 73: 
            { System.out.println("CLASS "+yytext()); return symbol(sym.CLASS);
            }
          case 179: break;
          case 74: 
            { System.out.println("FALSE "+yytext()); return symbol(sym.FALSE);
            }
          case 180: break;
          case 75: 
            { System.out.println("WHILE "+yytext()); return symbol(sym.WHILE);
            }
          case 181: break;
          case 76: 
            { System.out.println("YIELD "+yytext()); return symbol(sym.YIELD);
            }
          case 182: break;
          case 77: 
            { System.out.println("STATIC "+yytext()); return symbol(sym.STATIC);
            }
          case 183: break;
          case 78: 
            { System.out.println("STRING "+yytext()); return symbol(sym.STRING);
            }
          case 184: break;
          case 79: 
            { System.out.println("SWITCH "+yytext()); return symbol(sym.SWITCH);
            }
          case 185: break;
          case 80: 
            { System.out.println("SYMBOL "+yytext()); return symbol(sym.SYMBOL);
            }
          case 186: break;
          case 81: 
            { System.out.println("TYPEOF "+yytext()); return symbol(sym.TYPEOF);
            }
          case 187: break;
          case 82: 
            { System.out.println("RETURN "+yytext()); return symbol(sym.RETURN);
            }
          case 188: break;
          case 83: 
            { System.out.println("EXPORT "+yytext()); return symbol(sym.EXPORT);
            }
          case 189: break;
          case 84: 
            { System.out.println("NUMBER "+yytext()); return symbol(sym.NUMBER);
            }
          case 190: break;
          case 85: 
            { System.out.println("IMPORT "+yytext()); return symbol(sym.IMPORT);
            }
          case 191: break;
          case 86: 
            { System.out.println("MODULE "+yytext()); return symbol(sym.MODULE);
            }
          case 192: break;
          case 87: 
            { System.out.println("PUBLIC "+yytext()); return symbol(sym.PUBLIC);
            }
          case 193: break;
          case 88: 
            { System.out.println("DELETE "+yytext()); return symbol(sym.DELETE);
            }
          case 194: break;
          case 89: 
            { System.out.println("BOOLEAN "+yytext()); return symbol(sym.BOOLEAN);
            }
          case 195: break;
          case 90: 
            { System.out.println("REQUIRE "+yytext()); return symbol(sym.REQUIRE);
            }
          case 196: break;
          case 91: 
            { System.out.println("EXTENDS "+yytext()); return symbol(sym.EXTENDS);
            }
          case 197: break;
          case 92: 
            { System.out.println("FINALLY "+yytext()); return symbol(sym.FINALLY);
            }
          case 198: break;
          case 93: 
            { System.out.println("PACKAGE "+yytext()); return symbol(sym.PACKAGE);
            }
          case 199: break;
          case 94: 
            { System.out.println("PRIVATE "+yytext()); return symbol(sym.PRIVATE);
            }
          case 200: break;
          case 95: 
            { System.out.println("DECLARE "+yytext()); return symbol(sym.DECLARE);
            }
          case 201: break;
          case 96: 
            { System.out.println("DEFAULT "+yytext()); return symbol(sym.DEFAULT);
            }
          case 202: break;
          case 97: 
            { System.out.println("ABSTRACT "+yytext()); return symbol(sym.ABSTRACT);
            }
          case 203: break;
          case 98: 
            { System.out.println("CONTINUE "+yytext()); return symbol(sym.CONTINUE);
            }
          case 204: break;
          case 99: 
            { System.out.println("FUCTION "+yytext()); return symbol(sym.FUNCTION);
            }
          case 205: break;
          case 100: 
            { System.out.println("DEBURGGER "+yytext()); return symbol(sym.DEBUGGER);
            }
          case 206: break;
          case 101: 
            { System.out.println("INTERFACE "+yytext()); return symbol(sym.INTERFACE);
            }
          case 207: break;
          case 102: 
            { System.out.println("PROTECTED "+yytext()); return symbol(sym.PROTECTED);
            }
          case 208: break;
          case 103: 
            { System.out.println("INSTANCEOF "+yytext()); return symbol(sym.INSTANCEOF);
            }
          case 209: break;
          case 104: 
            { System.out.println("IMPLEMENTS "+yytext()); return symbol(sym.IMPLEMENTS);
            }
          case 210: break;
          case 105: 
            { System.out.println("CONSTRUCTOR "+yytext()); return symbol(sym.CONSTRUCTOR);
            }
          case 211: break;
          case 106: 
            { System.out.println("MASIGUAL "+yytext()); return symbol(sym.MASIGUAL);
            }
          case 212: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
