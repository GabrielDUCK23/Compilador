/* The following code was generated by JFlex 1.6.1 */

/* JFlex example: partial Java language lexer specification */
package compilador;
import java_cup.runtime.*;


/*

//Suarez Florez Jair Alfonso   
//Rios Sánchez Gabriel Ernesto
//Sánchez González Héctor Ulises

*/


/**
* This class is a simple example lexer.
*/

class TypeScriptLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\61\1\62\1\1\16\7\4\0\1\3\1\70"+
    "\1\56\1\0\1\6\1\67\1\73\1\57\1\44\1\45\1\5\1\64"+
    "\1\55\1\66\1\47\1\4\1\10\11\11\1\50\1\46\1\71\1\65"+
    "\1\72\2\0\4\6\1\42\11\6\1\30\3\6\1\60\7\6\1\51"+
    "\1\75\1\52\1\0\1\6\1\0\1\12\1\13\1\17\1\37\1\20"+
    "\1\23\1\40\1\34\1\22\1\6\1\21\1\33\1\24\1\27\1\26"+
    "\1\25\1\43\1\16\1\14\1\15\1\32\1\36\1\31\1\41\1\35"+
    "\1\6\1\53\1\74\1\54\1\0\6\7\1\63\32\7\2\0\4\6"+
    "\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6"+
    "\1\0\1\6\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0"+
    "\213\6\1\0\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0"+
    "\47\6\7\0\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0"+
    "\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6"+
    "\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6"+
    "\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7"+
    "\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0"+
    "\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7"+
    "\22\0\31\6\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0"+
    "\4\7\66\6\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0"+
    "\12\7\1\0\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7"+
    "\4\0\2\6\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6"+
    "\5\0\3\7\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7"+
    "\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6"+
    "\7\0\14\7\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6"+
    "\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7"+
    "\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6"+
    "\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7"+
    "\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0"+
    "\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0"+
    "\12\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0"+
    "\27\6\1\0\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0"+
    "\12\7\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7"+
    "\1\0\2\6\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6"+
    "\2\0\1\6\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7"+
    "\10\0\2\6\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0"+
    "\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0"+
    "\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0"+
    "\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0"+
    "\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0"+
    "\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0"+
    "\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0"+
    "\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0"+
    "\1\7\4\0\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7"+
    "\5\6\13\7\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6"+
    "\12\7\6\0\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7"+
    "\3\6\4\7\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6"+
    "\5\0\1\6\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6"+
    "\1\0\1\6\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6"+
    "\1\0\71\6\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6"+
    "\20\0\125\6\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6"+
    "\3\0\3\6\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7"+
    "\13\0\22\6\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0"+
    "\64\6\40\7\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0"+
    "\3\7\2\0\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0"+
    "\106\6\12\0\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6"+
    "\2\0\5\6\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7"+
    "\46\0\27\6\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7"+
    "\6\0\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0"+
    "\12\7\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6"+
    "\16\7\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6"+
    "\122\0\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0"+
    "\300\6\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0"+
    "\6\6\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0"+
    "\37\6\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0"+
    "\7\6\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0"+
    "\7\6\16\0\5\7\30\0\1\61\1\61\5\7\20\0\2\6\23\0"+
    "\1\6\13\0\5\7\5\0\6\7\1\0\1\6\15\0\1\6\20\0"+
    "\15\6\3\0\33\6\25\0\15\7\4\0\1\7\3\0\14\7\21\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\13\6\2\0"+
    "\4\6\5\0\5\6\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0"+
    "\57\6\1\0\205\6\6\0\4\6\3\7\2\6\14\0\46\6\1\0"+
    "\1\6\5\0\1\6\2\0\70\6\7\0\1\6\17\0\1\7\27\6"+
    "\11\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6"+
    "\u01d5\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0"+
    "\51\6\3\0\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51cd\6\63\0\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7"+
    "\2\6\24\0\57\6\1\7\4\0\12\7\1\0\31\6\7\0\1\7"+
    "\120\6\2\7\45\0\11\6\2\0\147\6\2\0\4\6\1\0\4\6"+
    "\14\0\13\6\115\0\12\6\1\7\3\6\1\7\4\6\1\7\27\6"+
    "\5\7\20\0\1\6\7\0\64\6\14\0\2\7\62\6\21\7\13\0"+
    "\12\7\6\0\22\7\6\6\3\0\1\6\4\0\12\7\34\6\10\7"+
    "\2\0\27\6\15\7\14\0\35\6\3\0\4\7\57\6\16\7\16\0"+
    "\1\6\12\7\46\0\51\6\16\7\11\0\3\6\1\7\10\6\2\7"+
    "\2\0\12\7\6\0\27\6\3\0\1\6\1\7\4\0\60\6\1\7"+
    "\1\6\3\7\2\6\2\7\5\6\2\7\1\6\1\7\1\6\30\0"+
    "\3\6\2\0\13\6\5\7\2\0\3\6\2\7\12\0\6\6\2\0"+
    "\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6\10\7"+
    "\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6"+
    "\u2104\0\u016e\6\2\0\152\6\46\0\7\6\14\0\5\6\5\0\1\6"+
    "\1\7\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6"+
    "\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6"+
    "\50\0\15\6\3\0\20\7\20\0\7\7\14\0\2\6\30\0\3\6"+
    "\31\0\1\6\6\0\5\6\1\0\207\6\2\0\1\7\4\0\1\6"+
    "\13\0\12\7\7\0\32\6\4\0\1\6\1\0\32\6\13\0\131\6"+
    "\3\0\6\6\2\0\6\6\2\0\6\6\2\0\3\6\3\0\2\6"+
    "\3\0\2\6\22\0\3\7\4\0\14\6\1\0\32\6\1\0\23\6"+
    "\1\0\2\6\1\0\17\6\2\0\16\6\42\0\173\6\105\0\65\6"+
    "\210\0\1\7\202\0\35\6\3\0\61\6\57\0\37\6\21\0\33\6"+
    "\65\0\36\6\2\0\44\6\4\0\10\6\1\0\5\6\52\0\236\6"+
    "\2\0\12\7\u0356\0\6\6\2\0\1\6\1\0\54\6\1\0\2\6"+
    "\3\0\1\6\2\0\27\6\252\0\26\6\12\0\32\6\106\0\70\6"+
    "\6\0\2\6\100\0\1\6\3\7\1\0\2\7\5\0\4\7\4\6"+
    "\1\0\3\6\1\0\33\6\4\0\3\7\4\0\1\7\40\0\35\6"+
    "\203\0\66\6\12\0\26\6\12\0\23\6\215\0\111\6\u03b7\0\3\7"+
    "\65\6\17\7\37\0\12\7\20\0\3\7\55\6\13\7\2\0\1\7"+
    "\22\0\31\6\7\0\12\7\6\0\3\7\44\6\16\7\1\0\12\7"+
    "\100\0\3\7\60\6\16\7\4\6\13\0\12\7\u04a6\0\53\6\15\7"+
    "\10\0\12\7\u0936\0\u036f\6\221\0\143\6\u0b9d\0\u042f\6\u33d1\0\u0239\6"+
    "\u04c7\0\105\6\13\0\1\6\56\7\20\0\4\7\15\6\u4060\0\2\6"+
    "\u2163\0\5\7\3\0\26\7\2\0\7\7\36\0\4\7\224\0\3\7"+
    "\u01bb\0\125\6\1\0\107\6\1\0\2\6\2\0\1\6\2\0\2\6"+
    "\2\0\4\6\1\0\14\6\1\0\1\6\1\0\7\6\1\0\101\6"+
    "\1\0\4\6\2\0\10\6\1\0\7\6\1\0\34\6\1\0\4\6"+
    "\1\0\5\6\1\0\1\6\3\0\7\6\1\0\u0154\6\2\0\31\6"+
    "\1\0\31\6\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6"+
    "\1\0\37\6\1\0\31\6\1\0\37\6\1\0\31\6\1\0\10\6"+
    "\2\0\62\7\u1600\0\4\6\1\0\33\6\1\0\2\6\1\0\1\6"+
    "\2\0\1\6\1\0\12\6\1\0\4\6\1\0\1\6\1\0\1\6"+
    "\6\0\1\6\4\0\1\6\1\0\1\6\1\0\1\6\1\0\3\6"+
    "\1\0\2\6\1\0\1\6\2\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\2\6\1\0\1\6\2\0\4\6"+
    "\1\0\7\6\1\0\4\6\1\0\4\6\1\0\1\6\1\0\12\6"+
    "\1\0\21\6\5\0\3\6\1\0\5\6\1\0\21\6\u1144\0\ua6d7\6"+
    "\51\0\u1035\6\13\0\336\6\u3fe2\0\u021e\6\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\1\3\1\4\2\5\23\4\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\4\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\0\1\31\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\1\4\1\37\22\4\1\40\1\4"+
    "\1\41\11\4\1\42\11\4\1\43\1\4\1\0\1\44"+
    "\1\4\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\2\34"+
    "\2\0\1\4\1\63\4\4\1\64\4\4\1\65\23\4"+
    "\1\66\6\4\1\67\4\4\1\70\1\4\1\71\5\4"+
    "\1\72\1\4\2\0\1\34\1\0\10\4\1\73\1\4"+
    "\1\74\1\75\2\4\1\76\4\4\1\77\1\100\7\4"+
    "\1\101\11\4\1\102\1\103\2\4\1\104\5\4\1\0"+
    "\1\4\1\105\4\4\1\106\1\4\1\107\3\4\1\110"+
    "\1\111\1\4\1\112\6\4\1\113\11\4\1\114\1\115"+
    "\7\4\1\116\1\117\1\120\1\121\1\122\1\123\4\4"+
    "\1\124\1\125\6\4\1\126\3\4\1\127\1\130\3\4"+
    "\1\131\2\4\1\132\1\133\2\4\1\134\3\4\1\135"+
    "\1\136\1\4\1\137\1\140\2\4\1\141\1\142\1\0"+
    "\1\4\1\143\1\4\1\144\3\4\1\145\1\4\1\146"+
    "\1\0\4\4\1\147\1\150\1\0\2\4\1\151\1\152"+
    "\1\0\1\4\1\153\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\154";

  private static int [] zzUnpackAction() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\272"+
    "\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364"+
    "\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u0554"+
    "\0\u0592\0\u05d0\0\u060e\0\u064c\0\272\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\u068a\0\272"+
    "\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a"+
    "\0\u08b8\0\u08f6\0\u0934\0\u068a\0\u0972\0\u09b0\0\u09ee\0\272"+
    "\0\272\0\u0a2c\0\u0174\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0174\0\u0ec6\0\u0f04"+
    "\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4"+
    "\0\u1132\0\u0174\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6"+
    "\0\u12e4\0\u1322\0\u1360\0\u0174\0\u139e\0\u068a\0\272\0\u13dc"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\272\0\272"+
    "\0\272\0\272\0\272\0\272\0\272\0\272\0\u141a\0\272"+
    "\0\u1458\0\u1496\0\u14d4\0\u0174\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u0174\0\u160a\0\u1648\0\u1686\0\u16c4\0\u0174\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930"+
    "\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20"+
    "\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10"+
    "\0\u0174\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u0174\0\u1e46\0\u0174"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u0174\0\u1fba\0\u1ff8"+
    "\0\u2036\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u2226\0\u2264\0\u0174\0\u22a2\0\u0174\0\u22e0\0\u231e"+
    "\0\u235c\0\u0174\0\u239a\0\u23d8\0\u2416\0\u2454\0\u0174\0\u0174"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u0174"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u0174\0\u0174\0\u2872\0\u28b0\0\u0174\0\u28ee\0\u292c"+
    "\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u0174\0\u2aa0\0\u2ade"+
    "\0\u2b1c\0\u2b5a\0\u0174\0\u2b98\0\u0174\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u0174\0\u2c90\0\u2cce\0\u0174\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u0174\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78"+
    "\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u0174\0\u0174\0\u30ae\0\u30ec"+
    "\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u3222\0\u0174\0\u0174\0\u0174"+
    "\0\u0174\0\u0174\0\u0174\0\u3260\0\u329e\0\u32dc\0\u331a\0\u0174"+
    "\0\u0174\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450\0\u348e\0\u0174"+
    "\0\u34cc\0\u350a\0\u3548\0\u0174\0\u0174\0\u3586\0\u35c4\0\u3602"+
    "\0\u0174\0\u3640\0\u367e\0\u0174\0\u0174\0\u36bc\0\u36fa\0\u0174"+
    "\0\u3738\0\u3776\0\u37b4\0\u0174\0\u0174\0\u37f2\0\u0174\0\u0174"+
    "\0\u3830\0\u386e\0\u0174\0\u0174\0\u38ac\0\u38ea\0\u0174\0\u3928"+
    "\0\u0174\0\u3966\0\u39a4\0\u39e2\0\u0174\0\u3a20\0\u0174\0\u3a5e"+
    "\0\u3a9c\0\u3ada\0\u3b18\0\u3b56\0\u0174\0\u0174\0\u3b94\0\u3bd2"+
    "\0\u3c10\0\u0174\0\u0174\0\u3c4e\0\u3c8c\0\u0174\0\u3cca\0\u3d08"+
    "\0\u3d46\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u40aa\0\272";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\3\2\4\1\5\1\6\1\7\1\0\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\7\1\21\1\22\1\23\1\24\1\25\1\26\1\7"+
    "\1\27\1\7\1\30\1\7\1\31\1\32\1\33\1\34"+
    "\3\7\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\0\1\4"+
    "\1\0\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\0\1\63\2\0\53\63\1\64\16\63"+
    "\1\65\2\0\1\4\175\0\1\66\1\67\57\0\1\70"+
    "\75\0\1\71\16\0\36\7\14\0\1\7\2\0\1\7"+
    "\22\0\2\11\72\0\5\7\1\72\1\73\12\7\1\74"+
    "\14\7\14\0\1\7\2\0\1\7\20\0\10\7\1\75"+
    "\7\7\1\76\15\7\14\0\1\7\2\0\1\7\20\0"+
    "\7\7\1\77\2\7\1\100\10\7\1\101\1\102\2\7"+
    "\1\103\6\7\14\0\1\7\2\0\1\7\20\0\10\7"+
    "\1\104\15\7\1\105\1\106\6\7\14\0\1\7\2\0"+
    "\1\7\20\0\12\7\1\107\23\7\14\0\1\7\2\0"+
    "\1\7\20\0\4\7\1\110\13\7\1\111\4\7\1\112"+
    "\10\7\14\0\1\7\2\0\1\7\20\0\21\7\1\113"+
    "\3\7\1\114\5\7\1\115\2\7\14\0\1\7\2\0"+
    "\1\7\20\0\15\7\1\116\1\117\2\7\1\120\14\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\121\3\7"+
    "\1\122\3\7\1\123\3\7\1\124\3\7\1\125\11\7"+
    "\14\0\1\7\2\0\1\7\20\0\20\7\1\126\15\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\127\3\7"+
    "\1\130\13\7\1\131\11\7\14\0\1\7\2\0\1\7"+
    "\20\0\15\7\1\132\20\7\14\0\1\7\2\0\1\7"+
    "\20\0\12\7\1\133\11\7\1\134\11\7\14\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\135\11\7\1\136\7\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\137\23\7"+
    "\14\0\1\7\2\0\1\7\20\0\14\7\1\140\21\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\141\13\7"+
    "\1\142\15\7\14\0\1\7\2\0\1\7\20\0\12\7"+
    "\1\143\5\7\1\144\15\7\14\0\1\7\2\0\1\7"+
    "\20\0\12\7\1\145\23\7\14\0\1\7\2\0\1\7"+
    "\12\0\56\146\1\147\17\146\6\0\27\7\1\150\6\7"+
    "\14\0\1\7\2\0\1\7\76\0\1\151\76\0\1\152"+
    "\75\0\1\153\1\154\74\0\1\155\75\0\1\156\75\0"+
    "\1\157\75\0\1\160\103\0\1\161\76\0\1\162\1\0"+
    "\1\63\2\0\53\63\1\0\16\63\16\0\1\163\1\164"+
    "\10\0\1\165\26\0\1\166\17\0\1\66\1\167\1\170"+
    "\73\66\5\171\1\172\70\171\6\0\6\7\1\173\27\7"+
    "\14\0\1\7\2\0\1\7\20\0\27\7\1\174\6\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\175\23\7"+
    "\14\0\1\7\2\0\1\7\20\0\20\7\1\176\15\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\177\3\7"+
    "\1\200\25\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\201\26\7\14\0\1\7\2\0\1\7\20\0\14\7"+
    "\1\202\21\7\14\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\203\16\7\14\0\1\7\2\0\1\7\20\0\16\7"+
    "\1\204\17\7\14\0\1\7\2\0\1\7\20\0\24\7"+
    "\1\205\2\7\1\206\6\7\14\0\1\7\2\0\1\7"+
    "\20\0\10\7\1\207\3\7\1\210\21\7\14\0\1\7"+
    "\2\0\1\7\20\0\17\7\1\211\16\7\14\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\212\25\7\1\213\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\214\1\215\26\7"+
    "\14\0\1\7\2\0\1\7\20\0\21\7\1\216\14\7"+
    "\14\0\1\7\2\0\1\7\20\0\4\7\1\217\31\7"+
    "\14\0\1\7\2\0\1\7\20\0\24\7\1\220\11\7"+
    "\14\0\1\7\2\0\1\7\20\0\6\7\1\221\27\7"+
    "\14\0\1\7\2\0\1\7\20\0\7\7\1\222\7\7"+
    "\1\223\16\7\14\0\1\7\2\0\1\7\20\0\17\7"+
    "\1\224\16\7\14\0\1\7\2\0\1\7\20\0\6\7"+
    "\1\225\1\226\26\7\14\0\1\7\2\0\1\7\20\0"+
    "\25\7\1\227\10\7\14\0\1\7\2\0\1\7\20\0"+
    "\20\7\1\230\15\7\14\0\1\7\2\0\1\7\20\0"+
    "\21\7\1\231\14\7\14\0\1\7\2\0\1\7\20\0"+
    "\10\7\1\232\25\7\14\0\1\7\2\0\1\7\20\0"+
    "\21\7\1\233\14\7\14\0\1\7\2\0\1\7\20\0"+
    "\31\7\1\234\4\7\14\0\1\7\2\0\1\7\20\0"+
    "\11\7\1\235\24\7\14\0\1\7\2\0\1\7\20\0"+
    "\14\7\1\236\3\7\1\237\15\7\14\0\1\7\2\0"+
    "\1\7\20\0\5\7\1\240\30\7\14\0\1\7\2\0"+
    "\1\7\20\0\23\7\1\241\12\7\14\0\1\7\2\0"+
    "\1\7\20\0\16\7\1\242\6\7\1\243\10\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\244\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\245\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\246\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\247\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\10\7\1\250\25\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\251\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\5\7\1\252\3\7\1\253"+
    "\3\7\1\254\7\7\1\255\10\7\14\0\1\7\2\0"+
    "\1\7\20\0\7\7\1\256\26\7\14\0\1\7\2\0"+
    "\1\7\20\0\6\7\1\257\27\7\14\0\1\7\2\0"+
    "\1\7\14\0\1\170\73\0\5\171\1\260\70\171\4\261"+
    "\1\262\1\263\70\261\6\0\7\7\1\264\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\4\7\1\265\31\7\14\0"+
    "\1\7\2\0\1\7\20\0\25\7\1\266\10\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\267\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\14\7\1\270\21\7\14\0"+
    "\1\7\2\0\1\7\20\0\7\7\1\271\26\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\272\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\5\7\1\273\30\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\274\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\20\7\1\275\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\276\27\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\277\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\24\7\1\300\11\7\14\0"+
    "\1\7\2\0\1\7\20\0\24\7\1\301\11\7\14\0"+
    "\1\7\2\0\1\7\20\0\12\7\1\302\23\7\14\0"+
    "\1\7\2\0\1\7\20\0\11\7\1\303\24\7\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\304\1\305\26\7"+
    "\14\0\1\7\2\0\1\7\20\0\6\7\1\306\27\7"+
    "\14\0\1\7\2\0\1\7\20\0\16\7\1\307\17\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\310\23\7"+
    "\14\0\1\7\2\0\1\7\20\0\12\7\1\311\23\7"+
    "\14\0\1\7\2\0\1\7\20\0\20\7\1\312\15\7"+
    "\14\0\1\7\2\0\1\7\20\0\20\7\1\313\4\7"+
    "\1\314\10\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\315\26\7\14\0\1\7\2\0\1\7\20\0\12\7"+
    "\1\316\23\7\14\0\1\7\2\0\1\7\20\0\6\7"+
    "\1\317\27\7\14\0\1\7\2\0\1\7\20\0\16\7"+
    "\1\320\17\7\14\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\321\31\7\14\0\1\7\2\0\1\7\20\0\34\7"+
    "\1\322\1\7\14\0\1\7\2\0\1\7\20\0\11\7"+
    "\1\323\24\7\14\0\1\7\2\0\1\7\20\0\24\7"+
    "\1\324\11\7\14\0\1\7\2\0\1\7\20\0\13\7"+
    "\1\325\22\7\14\0\1\7\2\0\1\7\20\0\30\7"+
    "\1\326\5\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\327\26\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\330\10\7\14\0\1\7\2\0\1\7\20\0\5\7"+
    "\1\331\30\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\332\10\7\14\0\1\7\2\0\1\7\20\0\26\7"+
    "\1\333\7\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\334\10\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\335\10\7\14\0\1\7\2\0\1\7\20\0\31\7"+
    "\1\336\4\7\14\0\1\7\2\0\1\7\20\0\24\7"+
    "\1\337\11\7\14\0\1\7\2\0\1\7\20\0\25\7"+
    "\1\340\10\7\14\0\1\7\2\0\1\7\20\0\4\7"+
    "\1\341\31\7\14\0\1\7\2\0\1\7\20\0\12\7"+
    "\1\342\23\7\14\0\1\7\2\0\1\7\20\0\7\7"+
    "\1\343\26\7\14\0\1\7\2\0\1\7\12\0\4\171"+
    "\1\170\1\260\70\171\5\0\1\344\70\0\4\261\1\170"+
    "\1\263\70\261\6\0\10\7\1\345\25\7\14\0\1\7"+
    "\2\0\1\7\20\0\13\7\1\346\22\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\347\23\7\14\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\350\21\7\14\0\1\7"+
    "\2\0\1\7\20\0\21\7\1\351\14\7\14\0\1\7"+
    "\2\0\1\7\20\0\11\7\1\352\24\7\14\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\353\25\7\14\0\1\7"+
    "\2\0\1\7\20\0\20\7\1\354\15\7\14\0\1\7"+
    "\2\0\1\7\20\0\23\7\1\355\12\7\14\0\1\7"+
    "\2\0\1\7\20\0\22\7\1\356\13\7\14\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\357\25\7\14\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\360\21\7\14\0\1\7"+
    "\2\0\1\7\20\0\26\7\1\361\7\7\14\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\362\26\7\14\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\363\21\7\14\0\1\7"+
    "\2\0\1\7\20\0\6\7\1\364\27\7\14\0\1\7"+
    "\2\0\1\7\20\0\21\7\1\365\14\7\14\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\366\25\7\14\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\367\25\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\370\23\7\14\0\1\7"+
    "\2\0\1\7\20\0\4\7\1\371\31\7\14\0\1\7"+
    "\2\0\1\7\20\0\10\7\1\372\25\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\373\23\7\14\0\1\7"+
    "\2\0\1\7\20\0\25\7\1\374\10\7\14\0\1\7"+
    "\2\0\1\7\20\0\4\7\1\375\31\7\14\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\376\26\7\14\0\1\7"+
    "\2\0\1\7\20\0\25\7\1\377\10\7\14\0\1\7"+
    "\2\0\1\7\20\0\4\7\1\u0100\31\7\14\0\1\7"+
    "\2\0\1\7\20\0\4\7\1\u0101\31\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\u0102\23\7\14\0\1\7"+
    "\2\0\1\7\20\0\14\7\1\u0103\21\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\u0104\23\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\u0105\23\7\14\0\1\7"+
    "\2\0\1\7\20\0\31\7\1\u0106\4\7\14\0\1\7"+
    "\2\0\1\7\20\0\32\7\1\u0107\3\7\14\0\1\7"+
    "\2\0\1\7\20\0\4\7\1\u0108\31\7\14\0\1\7"+
    "\2\0\1\7\20\0\24\7\1\u0109\11\7\14\0\1\7"+
    "\2\0\1\7\20\0\7\7\1\u010a\26\7\14\0\1\7"+
    "\2\0\1\7\20\0\12\7\1\u010b\23\7\14\0\1\7"+
    "\2\0\1\7\16\0\1\170\1\344\76\0\4\7\1\u010c"+
    "\31\7\14\0\1\7\2\0\1\7\20\0\4\7\1\u010d"+
    "\31\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u010e"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\32\7\1\u010f"+
    "\3\7\14\0\1\7\2\0\1\7\20\0\26\7\1\u0110"+
    "\7\7\14\0\1\7\2\0\1\7\20\0\25\7\1\u0111"+
    "\10\7\14\0\1\7\2\0\1\7\20\0\15\7\1\u0112"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\21\7\1\u0113"+
    "\14\7\14\0\1\7\2\0\1\7\20\0\10\7\1\u0114"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\10\7\1\u0115"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\21\7\1\u0116"+
    "\14\7\14\0\1\7\2\0\1\7\20\0\31\7\1\u0117"+
    "\4\7\14\0\1\7\2\0\1\7\20\0\7\7\1\u0118"+
    "\26\7\14\0\1\7\2\0\1\7\20\0\7\7\1\u0119"+
    "\26\7\14\0\1\7\2\0\1\7\20\0\16\7\1\u011a"+
    "\17\7\14\0\1\7\2\0\1\7\20\0\21\7\1\u011b"+
    "\14\7\14\0\1\7\2\0\1\7\20\0\15\7\1\u011c"+
    "\20\7\14\0\1\7\2\0\1\7\20\0\25\7\1\u011d"+
    "\10\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u011e"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\14\7\1\u011f"+
    "\21\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u0120"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\32\7\1\u0121"+
    "\3\7\14\0\1\7\2\0\1\7\20\0\7\7\1\u0122"+
    "\26\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u0123"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u0124"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\10\7\1\u0125"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\32\7\1\u0126"+
    "\3\7\14\0\1\7\2\0\1\7\20\0\10\7\1\u0127"+
    "\25\7\14\0\1\7\2\0\1\7\20\0\25\7\1\u0128"+
    "\10\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u0129"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\16\7\1\u012a"+
    "\17\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u012b"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\21\7\1\u012c"+
    "\14\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u012d"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\24\7\1\u012e"+
    "\11\7\14\0\1\7\2\0\1\7\20\0\24\7\1\u012f"+
    "\11\7\14\0\1\7\2\0\1\7\20\0\6\7\1\u0130"+
    "\27\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u0131"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\11\7\1\u0132"+
    "\24\7\14\0\1\7\2\0\1\7\20\0\4\7\1\u0133"+
    "\31\7\14\0\1\7\2\0\1\7\20\0\27\7\1\u0134"+
    "\6\7\14\0\1\7\2\0\1\7\20\0\26\7\1\u0135"+
    "\7\7\14\0\1\7\2\0\1\7\20\0\20\7\1\u0136"+
    "\15\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u0137"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u0138"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\7\7\1\u0139"+
    "\26\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u013a"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\12\7\1\u013b"+
    "\23\7\14\0\1\7\2\0\1\7\20\0\7\7\1\u013c"+
    "\26\7\14\0\1\7\2\0\1\7\12\0\1\u013d\2\0"+
    "\3\u013d\36\u013e\14\u013d\1\u013e\2\0\1\7\12\u013d\6\0"+
    "\7\7\1\u013f\26\7\14\0\1\7\2\0\1\7\20\0"+
    "\11\7\1\u0140\24\7\14\0\1\7\2\0\1\7\20\0"+
    "\12\7\1\u0141\23\7\14\0\1\7\2\0\1\7\20\0"+
    "\21\7\1\u0142\14\7\14\0\1\7\2\0\1\7\20\0"+
    "\12\7\1\u0143\23\7\14\0\1\7\2\0\1\7\20\0"+
    "\11\7\1\u0144\24\7\14\0\1\7\2\0\1\7\20\0"+
    "\21\7\1\u0145\14\7\14\0\1\7\2\0\1\7\20\0"+
    "\12\7\1\u0146\23\7\14\0\1\7\2\0\1\7\20\0"+
    "\10\7\1\u0147\25\7\14\0\1\7\2\0\1\7\40\0"+
    "\1\u0148\55\0\20\7\1\u0149\15\7\14\0\1\7\2\0"+
    "\1\7\20\0\7\7\1\u014a\26\7\14\0\1\7\2\0"+
    "\1\7\20\0\7\7\1\u014b\26\7\14\0\1\7\2\0"+
    "\1\7\20\0\22\7\1\u014c\13\7\14\0\1\7\2\0"+
    "\1\7\20\0\12\7\1\u014d\23\7\14\0\1\7\2\0"+
    "\1\7\20\0\31\7\1\u014e\4\7\14\0\1\7\2\0"+
    "\1\7\44\0\1\u014f\51\0\24\7\1\u0150\11\7\14\0"+
    "\1\7\2\0\1\7\20\0\20\7\1\u0151\15\7\14\0"+
    "\1\7\2\0\1\7\20\0\6\7\1\u0152\27\7\14\0"+
    "\1\7\2\0\1\7\20\0\15\7\1\u0153\20\7\14\0"+
    "\1\7\2\0\1\7\27\0\1\u0154\66\0\7\7\1\u0155"+
    "\26\7\14\0\1\7\2\0\1\7\20\0\10\7\1\u0156"+
    "\25\7\14\0\1\7\2\0\1\7\12\0\1\u0157\2\0"+
    "\56\u0157\3\0\13\u0157\2\0\3\u0157\36\u0158\14\u0157\1\u0158"+
    "\2\0\1\7\12\u0157\25\0\1\u0159\56\0\17\7\1\u015a"+
    "\16\7\14\0\1\7\2\0\1\7\30\0\1\u015b\65\0"+
    "\10\7\1\u015c\25\7\14\0\1\7\2\0\1\7\34\0"+
    "\1\u015d\61\0\14\7\1\u015e\21\7\14\0\1\7\2\0"+
    "\1\7\41\0\1\u015f\54\0\21\7\1\u0160\14\7\14\0"+
    "\1\7\2\0\1\7\27\0\1\u0161\66\0\7\7\1\u0162"+
    "\26\7\14\0\1\7\2\0\1\7\45\0\1\u0163\50\0"+
    "\25\7\1\u0164\10\7\14\0\1\7\2\0\1\7\41\0"+
    "\1\u0165\54\0\21\7\1\u0166\14\7\14\0\1\7\2\0"+
    "\1\7\76\0\1\u0167\17\0\36\7\14\0\1\7\2\0"+
    "\1\7\1\u0167\76\0\1\u0168\10\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16616];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\1\11\3\1\1\11\24\1\12\11\1\1"+
    "\1\11\10\1\2\0\4\1\1\0\2\11\54\1\1\0"+
    "\1\11\1\1\16\11\1\1\1\11\2\0\65\1\2\0"+
    "\1\1\1\0\60\1\1\0\130\1\1\0\12\1\1\0"+
    "\6\1\1\0\4\1\1\0\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[360];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
        StringBuffer string = new StringBuffer();

        private Symbol symbol(int type) {
         return new Symbol(type, yyline, yycolumn);
        }
        private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  TypeScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2872) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 109: break;
          case 2: 
            { System.out.println("DIVISION "+yytext()); return symbol(sym.DIVISION,yytext());
            }
          case 110: break;
          case 3: 
            { System.out.println("POR "+yytext()); return symbol(sym.POR,yytext());
            }
          case 111: break;
          case 4: 
            { System.out.println("Identifier "+yytext()); return symbol(sym.IDENTIFIER,yytext());
            }
          case 112: break;
          case 5: 
            { System.out.println("DecIntegerLiteral "+yytext()); return symbol(sym.INTEGER_LITERAL,yytext());
            }
          case 113: break;
          case 6: 
            { System.out.println("PARENTHESIS_OPEN "+yytext()); return symbol(sym.PARENTHESIS_OPEN,yytext());
            }
          case 114: break;
          case 7: 
            { System.out.println("PARENTHESIS_CLOSE "+yytext()); return symbol(sym.PARENTHESIS_CLOSE,yytext());
            }
          case 115: break;
          case 8: 
            { System.out.println("puntoYcoma"+yytext()); return symbol(sym.puntoYcoma,yytext());
            }
          case 116: break;
          case 9: 
            { System.out.println("punto "+yytext()); return symbol(sym.punto,yytext());
            }
          case 117: break;
          case 10: 
            { System.out.println("Dospuntos "+yytext()); return symbol(sym.Dospuntos,yytext());
            }
          case 118: break;
          case 11: 
            { System.out.println("corchete_open"+yytext()); return symbol(sym.corchete_open,yytext());
            }
          case 119: break;
          case 12: 
            { System.out.println("corchete_close "+yytext()); return symbol(sym.corchete_close,yytext());
            }
          case 120: break;
          case 13: 
            { System.out.println("llave_open"+yytext()); return symbol(sym.llave_open,yytext());
            }
          case 121: break;
          case 14: 
            { System.out.println("llave_close "+yytext()); return symbol(sym.llave_close,yytext());
            }
          case 122: break;
          case 15: 
            { System.out.println("coma "+yytext()); return symbol(sym.coma,yytext());
            }
          case 123: break;
          case 16: 
            { System.out.println("COMILLA_DOBLE "+yytext()); return symbol(sym.COMILLA_DOBLE,yytext());
            }
          case 124: break;
          case 17: 
            { System.out.println("COMILLA_SIMPLE "+yytext()); return symbol(sym.COMILLA_SIMPLE,yytext());
            }
          case 125: break;
          case 18: 
            { System.out.println("PLUS "+yytext()); return symbol(sym.PLUS,yytext());
            }
          case 126: break;
          case 19: 
            { System.out.println("EQ "+yytext()); return symbol(sym.EQ,yytext());
            }
          case 127: break;
          case 20: 
            { System.out.println("Menos "+yytext()); return symbol(sym.Menos,yytext());
            }
          case 128: break;
          case 21: 
            { System.out.println("PORCENTAJE "+yytext()); return symbol(sym.PORCENTAJE,yytext());
            }
          case 129: break;
          case 22: 
            { System.out.println("NOT "+yytext()); return symbol(sym.NOT,yytext());
            }
          case 130: break;
          case 23: 
            { System.out.println("MENORQUE "+yytext()); return symbol(sym.MENORQUE,yytext());
            }
          case 131: break;
          case 24: 
            { System.out.println("MAYORQUE "+yytext()); return symbol(sym.MAYORQUE,yytext());
            }
          case 132: break;
          case 25: 
            { string.append( yytext() );
            }
          case 133: break;
          case 26: 
            { yybegin(YYINITIAL); 
                                       return symbol(sym.STRING_LITERAL, 
                                       string.toString());
            }
          case 134: break;
          case 27: 
            { string.append('\\');
            }
          case 135: break;
          case 28: 
            { System.out.println("Comment"+yytext());
            }
          case 136: break;
          case 29: 
            { System.out.println("DIVISIONIGUAL "+yytext()); return symbol(sym.DIVISIONIGUAL,yytext());
            }
          case 137: break;
          case 30: 
            { System.out.println("PORIGUAL "+yytext()); return symbol(sym.PORIGUAL,yytext());
            }
          case 138: break;
          case 31: 
            { System.out.println("AS "+yytext()); return symbol(sym.AS,yytext());
            }
          case 139: break;
          case 32: 
            { System.out.println("IF "+yytext()); return symbol(sym.IF,yytext());
            }
          case 140: break;
          case 33: 
            { System.out.println("IN "+yytext()); return symbol(sym.IN,yytext());
            }
          case 141: break;
          case 34: 
            { System.out.println("OF "+yytext()); return symbol(sym.OF,yytext());
            }
          case 142: break;
          case 35: 
            { System.out.println("DO "+yytext()); return symbol(sym.DO,yytext());
            }
          case 143: break;
          case 36: 
            { System.out.println("CADENA "+yytext()); return symbol(sym.CADENA,yytext());
            }
          case 144: break;
          case 37: 
            { System.out.println("INCREMENTO "+yytext()); return symbol(sym.INCREMENTO,yytext());
            }
          case 145: break;
          case 38: 
            { System.out.println("EQEQ "+yytext()); return symbol(sym.EQEQ,yytext());
            }
          case 146: break;
          case 39: 
            { System.out.println("MENOSIGUAL "+yytext()); return symbol(sym.MENOSIGUAL,yytext());
            }
          case 147: break;
          case 40: 
            { System.out.println("DECREMENTO "+yytext()); return symbol(sym.DECREMENTO,yytext());
            }
          case 148: break;
          case 41: 
            { System.out.println("PorcentajeIGUAL "+yytext()); return symbol(sym.PorcentajeIGUAL,yytext());
            }
          case 149: break;
          case 42: 
            { System.out.println("COMPARAIGUAL "+yytext()); return symbol(sym.COMPARAIGUAL,yytext());
            }
          case 150: break;
          case 43: 
            { System.out.println("MENORIGUAL "+yytext()); return symbol(sym.MENORIGUAL,yytext());
            }
          case 151: break;
          case 44: 
            { System.out.println("MAYORIGUAL "+yytext()); return symbol(sym.MAYORIGUAL,yytext());
            }
          case 152: break;
          case 45: 
            { System.out.println("AND "+yytext()); return symbol(sym.AND,yytext());
            }
          case 153: break;
          case 46: 
            { System.out.println("OR "+yytext()); return symbol(sym.OR,yytext());
            }
          case 154: break;
          case 47: 
            { string.append('\t');
            }
          case 155: break;
          case 48: 
            { string.append('\r');
            }
          case 156: break;
          case 49: 
            { string.append('\n');
            }
          case 157: break;
          case 50: 
            { string.append('\"');
            }
          case 158: break;
          case 51: 
            { System.out.println("ANY "+yytext()); return symbol(sym.ANY,yytext());
            }
          case 159: break;
          case 52: 
            { System.out.println("SET "+yytext()); return symbol(sym.SET,yytext());
            }
          case 160: break;
          case 53: 
            { System.out.println("TRY "+yytext()); return symbol(sym.TRY,yytext());
            }
          case 161: break;
          case 54: 
            { System.out.println("FOR "+yytext()); return symbol(sym.FOR,yytext());
            }
          case 162: break;
          case 55: 
            { System.out.println("NEW "+yytext()); return symbol(sym.NEW,yytext());
            }
          case 163: break;
          case 56: 
            { System.out.println("LET "+yytext()); return symbol(sym.LET,yytext());
            }
          case 164: break;
          case 57: 
            { System.out.println("VAR "+yytext()); return symbol(sym.VAR,yytext());
            }
          case 165: break;
          case 58: 
            { System.out.println("GET "+yytext()); return symbol(sym.GET,yytext());
            }
          case 166: break;
          case 59: 
            { System.out.println("TRUE "+yytext()); return symbol(sym.TRUE,yytext());
            }
          case 167: break;
          case 60: 
            { System.out.println("THIS "+yytext()); return symbol(sym.THIS,yytext());
            }
          case 168: break;
          case 61: 
            { System.out.println("TYPE "+yytext()); return symbol(sym.TYPE,yytext());
            }
          case 169: break;
          case 62: 
            { System.out.println("CASE "+yytext()); return symbol(sym.CASE,yytext());
            }
          case 170: break;
          case 63: 
            { System.out.println("ENUM "+yytext()); return symbol(sym.ENUM,yytext());
            }
          case 171: break;
          case 64: 
            { System.out.println("ELSE "+yytext()); return symbol(sym.ELSE,yytext());
            }
          case 172: break;
          case 65: 
            { System.out.println("FROM "+yytext()); return symbol(sym.FROM,yytext());
            }
          case 173: break;
          case 66: 
            { System.out.println("NULL "+yytext()); return symbol(sym.NULL,yytext());
            }
          case 174: break;
          case 67: 
            { System.out.println("WITH "+yytext()); return symbol(sym.WITH,yytext());
            }
          case 175: break;
          case 68: 
            { System.out.println("VOID "+yytext()); return symbol(sym.VOID,yytext());
            }
          case 176: break;
          case 69: 
            { System.out.println("BREAK "+yytext()); return symbol(sym.BREAK,yytext());
            }
          case 177: break;
          case 70: 
            { System.out.println("SUPER "+yytext()); return symbol(sym.SUPER,yytext());
            }
          case 178: break;
          case 71: 
            { System.out.println("THROW "+yytext()); return symbol(sym.THROW,yytext());
            }
          case 179: break;
          case 72: 
            { System.out.println("CATCH "+yytext()); return symbol(sym.CATCH,yytext());
            }
          case 180: break;
          case 73: 
            { System.out.println("CONST "+yytext()); return symbol(sym.CONST,yytext());
            }
          case 181: break;
          case 74: 
            { System.out.println("CLASS "+yytext()); return symbol(sym.CLASS,yytext());
            }
          case 182: break;
          case 75: 
            { System.out.println("FALSE "+yytext()); return symbol(sym.FALSE,yytext());
            }
          case 183: break;
          case 76: 
            { System.out.println("WHILE "+yytext()); return symbol(sym.WHILE,yytext());
            }
          case 184: break;
          case 77: 
            { System.out.println("YIELD "+yytext()); return symbol(sym.YIELD,yytext());
            }
          case 185: break;
          case 78: 
            { System.out.println("STATIC "+yytext()); return symbol(sym.STATIC,yytext());
            }
          case 186: break;
          case 79: 
            { System.out.println("STRING "+yytext()); return symbol(sym.STRING,yytext());
            }
          case 187: break;
          case 80: 
            { System.out.println("SWITCH "+yytext()); return symbol(sym.SWITCH,yytext());
            }
          case 188: break;
          case 81: 
            { System.out.println("SYMBOL "+yytext()); return symbol(sym.SYMBOL,yytext());
            }
          case 189: break;
          case 82: 
            { System.out.println("TYPEOF "+yytext()); return symbol(sym.TYPEOF,yytext());
            }
          case 190: break;
          case 83: 
            { System.out.println("RETURN "+yytext()); return symbol(sym.RETURN,yytext());
            }
          case 191: break;
          case 84: 
            { System.out.println("EXPORT "+yytext()); return symbol(sym.EXPORT,yytext());
            }
          case 192: break;
          case 85: 
            { System.out.println("IMPORT "+yytext()); return symbol(sym.IMPORT,yytext());
            }
          case 193: break;
          case 86: 
            { System.out.println("MODULE "+yytext()); return symbol(sym.MODULE,yytext());
            }
          case 194: break;
          case 87: 
            { System.out.println("PUBLIC "+yytext()); return symbol(sym.PUBLIC,yytext());
            }
          case 195: break;
          case 88: 
            { System.out.println("NUMBER "+yytext()); return symbol(sym.NUMBER,yytext());
            }
          case 196: break;
          case 89: 
            { System.out.println("DELETE "+yytext()); return symbol(sym.DELETE,yytext());
            }
          case 197: break;
          case 90: 
            { System.out.println("BOOLEAN "+yytext()); return symbol(sym.BOOLEAN,yytext());
            }
          case 198: break;
          case 91: 
            { System.out.println("REQUIRE "+yytext()); return symbol(sym.REQUIRE,yytext());
            }
          case 199: break;
          case 92: 
            { System.out.println("EXTENDS "+yytext()); return symbol(sym.EXTENDS,yytext());
            }
          case 200: break;
          case 93: 
            { System.out.println("FINALLY "+yytext()); return symbol(sym.FINALLY,yytext());
            }
          case 201: break;
          case 94: 
            { System.out.println("FOREACH "+yytext()); return symbol(sym.FOREACH,yytext());
            }
          case 202: break;
          case 95: 
            { System.out.println("PACKAGE "+yytext()); return symbol(sym.PACKAGE,yytext());
            }
          case 203: break;
          case 96: 
            { System.out.println("PRIVATE "+yytext()); return symbol(sym.PRIVATE,yytext());
            }
          case 204: break;
          case 97: 
            { System.out.println("DECLARE "+yytext()); return symbol(sym.DECLARE,yytext());
            }
          case 205: break;
          case 98: 
            { System.out.println("DEFAULT "+yytext()); return symbol(sym.DEFAULT,yytext());
            }
          case 206: break;
          case 99: 
            { System.out.println("ABSTRACT "+yytext()); return symbol(sym.ABSTRACT,yytext());
            }
          case 207: break;
          case 100: 
            { System.out.println("CONTINUE "+yytext()); return symbol(sym.CONTINUE,yytext());
            }
          case 208: break;
          case 101: 
            { System.out.println("FUCTION "+yytext()); return symbol(sym.FUNCTION,yytext());
            }
          case 209: break;
          case 102: 
            { System.out.println("DEBURGGER "+yytext()); return symbol(sym.DEBUGGER,yytext());
            }
          case 210: break;
          case 103: 
            { System.out.println("INTERFACE "+yytext()); return symbol(sym.INTERFACE,yytext());
            }
          case 211: break;
          case 104: 
            { System.out.println("PROTECTED "+yytext()); return symbol(sym.PROTECTED,yytext());
            }
          case 212: break;
          case 105: 
            { System.out.println("IMPLEMENTS "+yytext()); return symbol(sym.IMPLEMENTS,yytext());
            }
          case 213: break;
          case 106: 
            { System.out.println("INSTANCEOF "+yytext()); return symbol(sym.INSTANCEOF,yytext());
            }
          case 214: break;
          case 107: 
            { System.out.println("CONSTRUCTOR "+yytext()); return symbol(sym.CONSTRUCTOR,yytext());
            }
          case 215: break;
          case 108: 
            { System.out.println("MASIGUAL "+yytext()); return symbol(sym.MASIGUAL,yytext());
            }
          case 216: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
